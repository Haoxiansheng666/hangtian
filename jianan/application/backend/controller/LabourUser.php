<?phpnamespace app\backend\controller;use app\backend\logic\CustomerLogic;use app\backend\logic\LabourLogic;use app\backend\model\AdminUser;use app\backend\model\Customer as C;use app\backend\model\ExamStudent;use app\backend\model\GradeStudent;use app\backend\model\LabourCompanyDemand;use app\backend\model\LabourUserRecommend;use app\backend\model\LabourUserWork;use app\backend\model\ProfessionCate;use app\backend\model\Recommend;use app\backend\model\ServiceContact;use think\db\exception\DataNotFoundException;use think\db\exception\ModelNotFoundException;use think\exception\DbException;use app\backend\model\LabourUser as L;use think\Request;class LabourUser extends Common{    private $id;    public function __construct(Request $request = null)    {        parent::__construct($request);        // 工种分类        $pro_cate_list= ProfessionCate::all();        $this->assign('pro_cate_list',$pro_cate_list);        $status = (new L)->status();//        unset($status['4']);        $work_exp = (new L)->work_exp();        $admin_list = AdminUser::all(['status' => 1]);        $xz = [            '面议',            '3000 - 5000',            '5000 - 8000',            '8000 - 12000',            '12000以上'        ];        $this->assign([            'status' => $status,            'work_exp' => $work_exp,            'admin_list' => $admin_list,            'xz' => $xz        ]);        $this->id = $this->request->param('id');    }    /**     * 就业学员列表     * @return mixed     */    public function index(){        return $this->fetch();    }    /**     * 客户数据导入的模板下载     * @access public     * @return void [type]     */    public function muban(){        $rr = LabourLogic::cus_muban();        $excel_name='就业人员导入模板';        LabourLogic::cus_down($rr,$excel_name,'1.工种：工种类型  2.类型：新办/复审 3.业务老师 就是登录的业务人员 ');    }    /**     * @return mixed|void     * @throws \Exception     */    public function leading()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param=input('param.');            $param['fileurl'] = ROOT_PATH.'public/'.$param['fileurl'];            $rss = LabourLogic::uploadFile($param['fileurl'],$this->ausess());            if($rss['status']==1){                $model=new \app\backend\model\LabourUser();                $re=$model->saveAll($rss['data']);                if($re){                    $this->success('数据导入成功');                }else{                    $this->error('数据导入失败了');                }            }else{                ajaxReturn($this->errCode('SQLError'), $rss['msg']);            }        }else{            return  $this->fetch();        }    }    /**     * 就业学员数据     * @throws DbException     */    public function getData()    {        $param = $this->request->param();        $where = LabourLogic::selectParam($param,$this->ausess());        $grade_student = (new L())            ->with('profession,salesman')            ->where($where)            ->order('id DESC')            ->paginate($this->request->param('limit','15'));        $data = $grade_student->items();        foreach ($data as $k => $v){            if (!empty($v['profession']['name'])){                $profession_top = \app\backend\model\Profession::get($v['profession']['pid']);                $data[$k]['profession_name_text'] = $profession_top['name'] . ' - - ' . $v['profession']['name'];                $company_id =  Recommend::where('labour_user_id',$v['id'])->order('id desc')->value('company_id');                $data[$k]['company'] = \app\backend\model\LabourCompany::where('id',$company_id)->value('name');            }        }        layuiReturn($this->errCode('OK'),'',$grade_student->total(),$data);    }    /**     * 就业信息审核列表     * @return mixed     */    public function audit_index(){        return $this->fetch();    }    /**     * 就业学员数据     * @throws DbException     */    public function getAuditData(){        $param = $this->request->param();        $where = LabourLogic::selectParam($param,$this->ausess());        $where['status'] = 0;        $grade_student = (new L())            ->with('profession,salesman')            ->where($where)            ->order('id DESC')            ->paginate($this->request->param('limit','15'));        $data = $grade_student->items();        foreach ($data as $k => $v){            if (!empty($v['profession']['name'])){                $profession_top = \app\backend\model\Profession::get($v['profession']['pid']);                $data[$k]['profession_name_text'] = $profession_top['name'] . ' - - ' . $v['profession']['name'];            }        }        layuiReturn($this->errCode('OK'),'',$grade_student->total(),$data);    }    /**     * 增加就业人员     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function add(){        if ($this->request->isPost()){            $param = $this->request->param();            $admin = $this->ausess();            // 判断角色权限是否为就业部，如果是则增加审核人和审核时间，如果不是则增加业务员，进入就业信息审核            $param['salesman_id'] = $admin['auid'];            if (!in_array($admin['department_id'],['7','8'])){                $param['check_time'] = time();                $param['check_admin_id'] = $admin['auid'];            }            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $model = new L();            if (!empty($param['id'])){                $model = $model->find(['id' => $param['id']]);            }            $model->allowField(true)->save($param);            $this->success('保存成功');        }        $this->assign([            'data' => [                'cate_id' => 0,            ]        ]);        return $this->fetch();    }    /**     * 修改     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function edit(){        if ($this->request->isPost()){            $param = $this->request->param();            $admin = $this->ausess();            // 判断角色权限是否为就业部，如果是则增加审核人和审核时间，如果不是则增加业务员，进入就业信息审核            $param['salesman_id'] = $admin['auid'];            if ($admin['group_id'] === false){                $param['check_time'] = time();                $param['check_admin_id'] = $admin['auid'];            }            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $model = new L();            if (!empty($param['id'])){                $model = $model->find(['id' => $param['id']]);            }            $model->allowField(true)->save($param);            $this->success('保存成功');        }        $user = (new L())->with('profession')->where('id',$this->id)->find();        $user['cate_id'] = $user['profession']['cate_id'];        $user['pid'] = $user['profession']['pid'];        $this->assign([            'data' => $user        ]);        return $this->fetch();    }    /**     * 详情     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function detail(){        $user = (new L())            ->with('salesman,work,recommend.company,profession')            ->where('id',$this->id)            ->find();        $user['rec_record'] = Recommend::where('pay_student_id',$user['pay_student_id'])->select();        $this->assign([            'user' => $user        ]);        return $this->fetch();    }    /**     * 详情     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function audit_detail(){        $user = (new L())            ->with('salesman,work,recommend.company,profession')            ->where('id',$this->id)            ->find();        $profession_top = \app\backend\model\Profession::get($user['profession']['pid']);        $user['profession_name'] = $profession_top['name'] . ' - - ' . $user['profession']['name'];        $this->assign([            'user' => $user        ]);        return $this->fetch();    }    /**     * 同意     * @throws DbException     */    public function consent(){        $user = L::get($this->id);        if (empty($user)){            $this->error('服务器错误');        }        $user->status = 1;        $user->check_time = time();        $user->check_admin_id = $this->ausess()['auid'];        $user->save();        $this->success('审核状态修改成功');    }    /**     * 拒绝     * @return mixed     * @throws DbException     */    public function refuse(){        if ($this->request->isPost()){            $param = $this->request->param();            $user = L::get($this->id);            if (empty($user)){                $this->error('服务器错误');            }            $user->status = -1;            $user->feedback = $param['feedback'];            $user->check_time = time();            $user->check_admin_id = $this->ausess()['auid'];            $user->save();            $this->success('审核状态修改成功');        }        $this->assign([            'id' => $this->id        ]);        return $this->fetch();    }    /**     * 删除     * @throws DbException     */    public function delete(){        $user = L::get($this->id);        $user->delete();        $this->success('删除成功');    }    public function work_exp(){        if ($this->request->isPost()){            $param = $this->request->param();            $work = [];            $work_update = [];            foreach ($param['company'] as $k => $v){                if (!empty($v) && empty($param['exp_id'][$k])){                    $work[] = [                        'labour_user_id' => $this->id,                        'action_time' => !empty($param['action_time'][$k]) ? strtotime( $param['action_time'][$k]) : time(),                        'end_time' => !empty($param['end_time'][$k]) ? strtotime( $param['end_time'][$k]) : time(),                        'company' => $v,                        'remark' => !empty($param['remark'][$k]) ? $param['remark'][$k] : '',                    ];                }elseif(!empty($v) && !empty($param['exp_id'][$k])){                    $work_update[] = [                        'labour_user_id' => $this->id,                        'action_time' => !empty($param['action_time'][$k]) ? strtotime( $param['action_time'][$k]) : time(),                        'end_time' => !empty($param['end_time'][$k]) ? strtotime( $param['end_time'][$k]) : time(),                        'company' => $v,                        'remark' => !empty($param['remark'][$k]) ? $param['remark'][$k] : '',                        'id' => $param['exp_id'][$k]                    ];                }            }            if (!empty($work_update)){                foreach ($work_update as $k => $v){                    (new LabourUserWork())->where('id',$v['id'])->update($v);                }                (new LabourUserWork())->whereNotIn('id',$param['exp_id'])->delete();            }            if (!empty($work)){                (new LabourUserWork())->allowField(true)->saveAll($work);            }            $this->success('工作经历添加成功');        }        $work_list = (new LabourUserWork())            ->where('labour_user_id',$this->id)            ->select();        $this->assign([            'id' => $this->id,            'work_list' => $work_list        ]);        return $this->fetch();    }    /**     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function recommend()    {        if ($this->request->isPost()){            $param = $this->request->param();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $model = new Recommend();            //if($model->where(['pay_student_id'=>$param['pay_student_id'],'company_id'=>$param['company_id']])->find()){            if($model->where(['labour_user_id'=>$param['labour_user_id'],'company_id'=>$param['company_id']])->find()){                $this->error('已推荐过该企业');            }            $profession = explode('-',$param['profession']);unset($param['profession']);$param['create_time'] = time();            $param['cate_id'] = $profession[0];$param['profession_top_id'] = $profession[1];$param['profession_id'] = $profession[2];            //推荐人数增加            \app\backend\model\LabourCompany::where('id',$param['company_id'])->setInc('recommend_num',1);            $model->allowField(true)->save($param);            $this->success('保存成功');        }        $user = (new L())->with('profession')->where('id',$this->id)->find();        $profession = \app\backend\model\Profession::where('id',$user['profession_id'])->find();        $profession_top = \app\backend\model\Profession::where('id',$profession['pid'])->find();        $profession_cate = db('profession_cate')->where('id',$profession['cate_id'])->find();        $user['profession_name'] = $profession_cate['name'].'--'.$profession_top['name'].'--'.$profession['name'];        $user['profession'] = $profession['cate_id'].'-'.$profession['pid'].'-'.$profession['id'];        $company = \app\backend\model\LabourCompany::where('status',1)->field('id,name,contact_name,contact_mobile')->select();        $this->assign(['data' => $user,'company'=>$company]);        return $this->fetch();    }    /**     * 查企业信息     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function company(){        $param = $this->request->param();        $company = \app\backend\model\LabourCompany::where('id',$param['id'])->field('id,name,contact_name,contact_mobile,status')->find();        $this->success('','',$company);    }}