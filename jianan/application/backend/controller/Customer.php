<?phpnamespace app\backend\controller;use app\backend\logic\CompanyLogic;use app\backend\logic\FinancingLogic;use app\backend\logic\GradeLogic;use app\backend\logic\PayStudentLogic;use app\backend\logic\ProfessionLogic;use app\backend\model\AuthGroup;use app\backend\model\Company;use app\backend\model\CompanyCustomerBatch;use app\backend\model\CustomerTransfer;use app\backend\model\Grade as G;use app\backend\model\GradeStudent;use app\backend\model\Occupation;use app\backend\model\OccupationStudent;use app\backend\model\OccuProfession;use app\backend\model\OccuRecord;use app\backend\model\PayLog;use app\backend\model\PayStudent;use app\backend\model\ProceedsType;use app\backend\model\ProfessionCate;use app\backend\model\Profession;use app\backend\model\AdminDepartment;use app\backend\model\Config as ConfigModel;use Exception;use think\Controller;use think\Db;use think\Config;use think\db\exception\DataNotFoundException;use think\db\exception\ModelNotFoundException;use think\exception\DbException;use think\Model;use think\Request;use app\backend\model\CustomerCate;use app\backend\model\CustomerFrom;use app\backend\model\CustomerRecord;use app\backend\model\Customer as C;use app\backend\logic\CustomerLogic;use app\backend\model\AdminUser;class Customer  extends Common{       protected $tableName = 'customer_cate';    protected $tableName1 = 'customer';    protected $tableName2 = 'company';    public function __construct(Request $request = null)    {        parent::__construct($request);        $cate_list=CustomerCate::getAll(['status'=>1]);        $this->assign('cate_list',$cate_list);        // 判断业务权限        $admin = $this->ausess();        $this->assign('admin_info',$admin);        $auth_sf = 0;        $group = AuthGroup::get($admin['group_id']);        if ($group['pid'] == 0 && $group['department_id'] == 0){            $aulist=AdminUser::all();            $auth_sf = 1;        }else if ($group['pid'] == 0 && $group['department_id'] == 7){            $aulist = AdminUser::all(['campus_id' => $admin['campus_id']]);            $auth_sf = 2;        }else{            $top_group = AuthGroup::get($group['pid']);            if ($top_group['pid'] == 0){                $aulist = AdminUser::all(['pid' => $admin['auid'],'campus_id' => $admin['campus_id']]);                $auth_sf = 3;            }else{                $aulist = [];                $auth_sf = 4;            }        }        $this->assign('aulist',$aulist);        $this->assign('auth_sf',$auth_sf);        // 工种分类        $pro_cate_list= ProfessionCate::all();        $this->assign('pro_cate_list',$pro_cate_list);        // 支付方式        $proceeds_type = ProceedsType::all();        $this->assign('proceeds_type',$proceeds_type);        // 班主任        $aulist = AdminUser::all(['group_id' => 4]);        $this->assign('aulist',$aulist);        // 状态        $status = (new Occupation())->getStatusArray();        $this->assign('status_list',$status);        //职业技能提升        $occu_profession = OccuProfession::where('pid',0)->select();        $this->assign('profession',$occu_profession);    }    /**     * 客户列表     * @access public     * @return mixed     */    public function index(){        return  $this->fetch();    }    /**     * 客户公海池     */    public function gong(){        return  $this->fetch('index/gong');    }    /**     * 学员检索     */    public function search(){        return  $this->fetch('index/search');    }        /**     * 客户列表数据的获取     * @access public     * @return void [json]     */    public function getData(){        $model=new C;        $param=input('param.');        $where=CustomerLogic::selectParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $rs=$model->get_join_list($param,$where);        //halt($rs);        layuiReturn($this->errCode('OK'), '获取成功', $rs['count'], $rs['list']);    }    /**     * 客户列表数据的获取     * @access public     * @return void [json]     */    public function getDataList(){        $model=new C;        $param=input('param.');        $where=CustomerLogic::selectParam($param,[]);        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $config_time = ConfigModel::where('id',24)->value('value');        $time = strtotime('- '.$config_time.' days');        $where1 = 'ren_time < '.$time.' or auid is null';        if(isset($param['from'])){            $where['from'] = $param['from'];        }        $rs = $model->get_joinList($param,$where,$where1);        //halt($rs);        layuiReturn($this->errCode('OK'), '获取成功', $rs['count'], $rs['list']);    }    /**     * 客户数据的删除     * @access public     * @return void [json]     */    public function delete(){      if(var_export(Request::instance()->isAjax(), true)==='true'){          $ress=$this->del($this->tableName1);          return $ress;       }    }    /**     * 认领公海池的人员     * @throws DbException     */    public function renling(){        $param=input('param.');        $admin = $this->ausess();        if(var_export(Request::instance()->isAjax(), true)==='true'){          $customer = C::get($param['id']);          $res = $customer->save(['ren_time'=>time(),'group_id'=>$admin['group_id'],'auid'=>$admin['auid'],'yuan_auid'=>'']);          if($res){              $this->success('认领成功');          }else{              $this->error('认领失败');          }       }    }        /**     * 客户添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function add(){      $param=input('param.');      if(var_export(Request::instance()->isAjax(), true)==='true'){          $customer = C::where('locate('.$param["mobile"].' , mobile)')->find();          if($customer &&  $param['id'] == ""){                $admin = AdminUser::where('id',$customer['auid'])->value('real_name');                $group = AdminDepartment::where('id',$customer['group_id'])->value('name');                $profession_top = Profession::where('id',$customer['profession_top_id'])->value('name');                $profession = Profession::where('id',$customer['profession_id'])->value('name');                $this->error('该客户已添加,归属于'.$group.$admin.'老师，报名的是'.$profession_top.$profession.'工种');          }          $model=new C;          $ress = $this->addAction($model);      }else{          $catelist=CustomerCate::getAll(['status'=>1]);          $fromlist=CustomerFrom::getAll(['status'=>1]);          $source_list = \app\backend\model\CustomerSource::all();          if(!empty($param['id'])){              $ress= C::get($param['id']);              if (!empty($ress['id'])){                  $ress['customer_cate_id'] = $ress['cate_id'];                  $ress['customer_id'] = $ress['id'];                  $ress['pid'] = 0;                  // 查询学员工种上级栏目ID                  $profession = \app\backend\model\Profession::get($ress['profession_id']);                  $cate_id = ProfessionCate::get($profession['cate_id']);                  $ress['cate_id'] = $cate_id['id'];                  $ress['pid'] = $profession['pid'];              }          }else{              $ress=[                  'cate_id'=>'',                  'customer_cate_id'=>'',                  'customer_source_name'=>'',                  'from'=>''              ];          }          $data=['ress'=>$ress,'fromlist'=>$fromlist,'catelist'=>$catelist,'source_list' => $source_list];          $this->assign('data',$data);          return  $this->fetch();      }    }         /**     * 首页个人客户报名     */    public function add_data(){        $ress=['cate_id'=>'','customer_cate_id'=>'','customer_source_name'=>'','from'=>''];        $catelist=CustomerCate::getAll(['status'=>1]);        $fromlist=CustomerFrom::getAll(['status'=>1]);        $source_list = \app\backend\model\CustomerSource::all();        $data=['ress'=>$ress,'fromlist'=>$fromlist,'catelist'=>$catelist,'source_list' => $source_list];        $this->assign('data',$data);        return  $this->fetch('index/add');    }        /**     * 首页企业客户报名     */    public function edit_data(){        $ress=['cate_id'=>'','customer_cate_id'=>'','customer_source_name'=>'','from'=>''];        $catelist=CustomerCate::getAll(['status'=>1]);        $fromlist=CustomerFrom::getAll(['status'=>1]);        $source_list = \app\backend\model\CustomerSource::all();        $data=['ress'=>$ress,'fromlist'=>$fromlist,'catelist'=>$catelist,'source_list' => $source_list];        $this->assign('data',$data);        return  $this->fetch('index/edit');    }    /**     * 客户详情     * @access public     * @return mixed [type] 页面     * @throws DbException     */    public function detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= C::get($param['id']);            if (!empty($ress['profession_id'])){                $ress['profession_info'] = \app\backend\model\Profession::get($ress['profession_id']);                $ress['profession_top_info'] = \app\backend\model\Profession::get($ress['profession_info']['pid']);                $ress['profession_cate_info'] = ProfessionCate::get($ress['profession_info']['cate_id']);            }            $catelist=CustomerCate::getAll(['status'=>1]);            $record= CustomerRecord::getAll(['customer_id'=>$param['id']]);        }else{            $this->error('页面出错了！');        }        $data=['record'=>$record,'ress'=>$ress,'param'=>$param,'catelist'=>$catelist];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 企业客户缴费     * @access public     * @return mixed [type] 页面     * @throws DbException     */    public function pay_money(){        $param=input('param.');        if(var_export(Request::instance()->isAjax(), true)==='true'){            if (empty($param['batch_number'])){                $this->error('批次号不能为空');            }            $batch = \app\backend\model\PayStudent::where('batch_number',$param['batch_number'])->where('status','<>',11)->select();            //$batch = \app\backend\model\PayStudent::where('batch_number',$param['batch_number'])->where('status != 11')->select();            //var_dump($batch);exit;            $pay_log_data = [];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $campus_id = $this->ausess()['campus_id'];            }else{                //添加人 没有校区的  添加到第一个校区里面                $campus = \app\backend\model\Campus::all();                $campus_id = array_column($campus,'id')[0];            }            foreach ($batch as $item){                $log_data = [                    'batch_number' => $param['batch_number'],                    'pay_price' => $param['pay_price'],                    'pay_way' => $param['pay_way'],                    'pay_site' => $param['pay_site'],                    'proceeds_type' => $param['proceeds_type'],                    'pay_proof' => $param['pay_proof'],                    'remark' => $param['mark'],                    'create_time' => time(),                    'pay_time' => $param['pay_time'],                    'from'=>2,                    'campus_id'=>$campus_id,                    'company_id'=>CompanyCustomerBatch::where('batch_number',$param['batch_number'])->value('customer_id')                ];                $log_data['pay_student_id'] = $item['id'];                $log = PayLog::where(['pay_student_id'=>$item['id'],'type'=>1])->where('status','in',[0,1])->find();                if(!$log){                    array_push($pay_log_data,$log_data);                }            }            (new PayLog())->saveAll($pay_log_data);            \app\backend\model\PayStudent::where('batch_number',$param['batch_number'])->update(['status'=>11]);            $this->success('已提交财务审核');        }        if(isset($param['id']) && !empty($param['id'])){            $ress= C::get($param['id']);            $batch_number = CompanyCustomerBatch::all([                'customer_id' => $param['id']            ]);        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress,'param'=>$param];        $this->assign([            'batch_number' => $batch_number        ]);        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 企业客户缴费     * @access public     * @return mixed [type] 页面     * @throws DbException     */    public function qiye_money(){        $param=input('param.');        if(var_export(Request::instance()->isAjax(), true)==='true'){            $student = \app\backend\model\PayStudent::where('id','in',$param['id'])->where('status','<>',11)->select();            $pay_log_data = [];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $campus_id = $this->ausess()['campus_id'];            }else{                //添加人 没有校区的  添加到第一个校区里面                $campus = \app\backend\model\Campus::all();                $campus_id = array_column($campus,'id')[0];            }            foreach ($student as $item){                $log_data = [                    'batch_number' => $item['batch_number'],                    'create_time' => time(),                    'campus_id' => $campus_id,                    'from'=>2,                ];                $log_data['pay_student_id'] = $item['id'];                array_push($pay_log_data,$log_data);            }            (new PayLog())->saveAll($pay_log_data);            \app\backend\model\PayStudent::where('id','in',$param['id'])->update(['status'=>11]);            $this->success('已提交财务审核');        }    }    public function grade()    {        return $this->fetch('');    }    /**     * @return mixed     */    public function profession()    {        return $this->fetch('profession/occ_index');    }    /**     * @throws DbException     */    public function professionData()    {        $model=new \app\backend\model\OccuProfession();        $param=input('param.');        $where=ProfessionLogic::select_Param($param,$this->ausess());        $rs=$model->where($where)->order('id DESC')->paginate($param['limit']);        layuiReturn($this->errCode('OK'), '获取成功', $rs->total(), $rs->items());    }    /**     * @return mixed     * @throws DbException     */    public function pro_add(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model = new \app\backend\model\OccuProfession();            $pid = input('pid') ?? 0;            if($model->where(['name'=>input('name'),'pid'=>$pid])->find()){                $this->error('您已添加该工种');            }            if(input('id')){                $model = OccuProfession::get(input('id'));            }            $model->save(['pid'=>$pid,'name'=>input('name')]);            $this->success('信息修改成功');        }else {            $param = input('param.');            $ress = [];            if (!empty($param['id'])) {                $ress = OccuProfession::get($param['id']);            }elseif(!empty($param['pid'])) {                $ress=[                    'pid'=>$param['pid'],                    'name'=>''                ];            }else{                $ress=[                    'pid'=>0,                    'name'=>''                ];            }            $cate_list = OccuProfession::all(['pid'=>0]);            $data = ['ress' => $ress];            $this->assign('data', $data);            $this->assign('cate_list',$cate_list);        }        return $this->fetch('profession/occ_add');    }    /**     * 删除     */    public function pro_del(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $ress = $this->del('occu_profession');            return $ress;        }    }    /**     * 线下班级     */    public function offline_occu()    {        return $this->fetch('grade/offline_occu');    }    /**     * 获取线下班级数据     * @throws DbException     */    public function getOfflineData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new Occupation())            ->with('teacher,admin,occupation')            ->where($where)            ->where('train_site',2)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\OccuProfession::get($item['profession_top_id']);                $profession = \app\backend\model\OccuProfession::get($item['profession_id']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$profession['name'];                $total_price = OccupationStudent::where('grade_id',$item['id'])->sum('price');                $item['total_price'] = $total_price;                $tui_price = OccuRecord::where('customer_id',$item['id'])->sum('price');                $item['tui_price'] = $tui_price;                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 线上班级     */    public function ol_occu()    {        return $this->fetch('grade/ol_occu');    }    /**     * 获取职业技能提升线上班级数据     * @throws DbException     */    public function getOlData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new Occupation())            ->with('teacher,admin,occupation')            ->where($where)            ->where('train_site',1)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\OccuProfession::get($item['profession_top_id']);                $profession = \app\backend\model\OccuProfession::get($item['profession_id']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$profession['name'];                $total_price = OccupationStudent::where('grade_id',$item['id'])->sum('price');                $item['total_price'] = $total_price;                $tui_price = OccuRecord::where('customer_id',$item['id'])->sum('price');                $item['tui_price'] = $tui_price;                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 线上线下班级     */    public function ol_of_occu()    {        return $this->fetch('grade/ol_of_occu');    }    /**     * 获取线下班级数据     * @throws DbException     */    public function getOlOfData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new Occupation())            ->with('teacher,admin,occupation')            ->where($where)            ->where('train_site',3)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\OccuProfession::get($item['profession_top_id']);                $profession = \app\backend\model\OccuProfession::get($item['profession_id']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$profession['name'];                $total_price = OccupationStudent::where('grade_id',$item['id'])->sum('price');                $item['total_price'] = $total_price;                $tui_price = OccuRecord::where('customer_id',$item['id'])->sum('price');                $item['tui_price'] = $tui_price;                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 学生     */    public function occ_student()    {        $id = $this->request->param('id');        $this->assign(['id' => $id]);        return $this->fetch('grade/occ_student');    }    /**     * 增加班级     * @return mixed     * @throws DbException     */    public function occ_add(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model=new Occupation();            $this->addAction($model);        }        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = Occupation::get($param['id']);            $profession = \app\backend\model\OccuProfession::get($res['profession_id']);            $res['pid'] = $profession['pid'];        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign(['res' => $res]);        return $this->fetch();    }    /**     * 增加班级     * @return mixed     * @throws DbException     */    public function occ_detail(){        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = Occupation::get($param['id']);            $profession = \app\backend\model\OccuProfession::get($res['profession_id']);            $res['pid'] = $profession['pid'];        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign(['res' => $res]);        return $this->fetch();    }    /**     * 删除操作     */    public function occ_del(){        $param = $this->request->param();        if (!empty($param['id'])){            $where = ['id' => $param['id']];        }elseif(!empty($param['ids'])){            $where = ['id' => ['in',$param['ids']]];        }else{            $this->error('访问方法错误');        }        $grade_student = (new OccupationStudent())            ->where(['grade_id' => $where['id']])            ->find();        if (!empty($grade_student)){            $this->error('请先移除班级内成员');        }        (new Occupation())->where($where)->delete();        $this->success('删除数据成功');    }    /**     * 获取学员     * @throws DbException     */    public function getStudentData(){        $param = $this->request->param();        $where = GradeLogic::selectStudentParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new OccupationStudent())            ->where($where)            ->paginate($param['limit']);        $data = $list->items();        foreach ($data as $k => $v){            // 增加学员关联的业务员及报名资料            $profession_id = $v['profession_id'];            $profession = \app\backend\model\OccuProfession::get($profession_id);            $profession_top = \app\backend\model\OccuProfession::get($profession['pid']);            $data[$k]['profession'] = $profession;            $data[$k]['profession_name'] = $profession_top['name'] . ' - - ' . $profession['name'];        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 放弃客户     * @throws DbException     */    public function abandon(){        $id = $this->request->param('id');        $customer = C::get($id);        $customer->yuan_auid = $customer['auid'];        $customer->auid = null;        $customer->group_id = null;        $customer->save();        $this->success('客户已转入公海库');    }    /**     * 转移客户     * @throws DbException     */    public function make_over(){        $id = $this->request->param('id');        $auid = $this->request->param('auid');        $transfer_cause = $this->request->param('transfer_cause');        if (empty($id) || empty($auid)){            $this->error('参数错误');        }        $data = [            'customer_id' => $id,            'old_admin_id' => $this->ausess()['auid'],            'admin_id' => $auid,            'transfer_cause' => $transfer_cause        ];        $admin = AdminUser::get($auid);        if ($admin['department_id'] != $this->ausess()['department_id']){            $data['status'] = 0;        }else{            $data['status'] = 1;            $data['audit_time'] = time();            $customer = C::get($id);            $customer->save([                'auid' => $admin['id'],                'group_id' => $admin['group_id']            ]);        }        (new CustomerTransfer())->save($data);        $this->success('客户转移申请已提交');    }    /**     * 客户回访记录的添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function add_record(){      if(var_export(Request::instance()->isAjax(), true)==='true'){          $model=new CustomerRecord;          $param = $this->request->param();          $customer = C::get($param['customer_id']);          if (!empty($param['contents'])){              $data = [                  'customer_id' => $customer['id'],                  'auid' => $customer['auid'],                  'group_id' => $customer['group_id'],                  'contents' => $param['contents'],                  'create_time' => time(),              ];              $model->save($data);          }          // 修改客户状态          // 修改客户状态          $customer_data = [];          if (!empty($param['warn_time'])){              $customer_data['next_contact_time'] = strtotime($param['warn_time']);              $customer_data['end_time'] = time();              $customer_data['follow_status'] = 1;          }else{              $customer_data['next_contact_time'] = '';              $customer_data['end_time'] = time();              $customer_data['follow_status'] = 2;          }          $result = $customer->save($customer_data);          if ($result){              ajaxReturn(1, '跟进记录保存成功');          }else{              ajaxReturn($this->errCode('SQLError'), '页面出错了');          }      }else{          $param=input('param.');          if(isset($param['id']) && !empty($param['id'])){              $ress= C::get($param['id']);              $catelist=CustomerCate::getAll(['status'=>1]);          }else{             $this->error('页面出错了！');          }          $data=['id'=>$param['id'],'catelist'=>$catelist,'ress'=>$ress];          $this->assign('data',$data);          return  $this->fetch();      }    }    /**     * 客户数据下载     * @access public     * @return void [type]     */    public function down1(){      $model=new C;      $param=input('param.');      $where=CustomerLogic::selectParam($param,$this->ausess());      $data=$model->get_down_list($param,$where);      $excel_name='客户信息_'.date('YmdHis');      CustomerLogic::down($data,$excel_name);    }    /**     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function down(){        $param = $this->request->param();        $list_items = (new \app\backend\model\Customer())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $key=>$item){            $list_items[$key]['profession_top'] = Profession::where('id',$item['profession_top_id'])->value('name');            $list_items[$key]['profession'] = Profession::where('id',$item['profession_id'])->value('name');            $list_items[$key]['admin'] = AdminUser::where('id',$item['auid'])->value('real_name');            $list_items[$key]['cate'] = \app\backend\model\CustomerCate::where('id',$item['cate_id'])->value('name');            $list_items[$key]['source'] = $item['customer_source_name'];        }        $excel_name='意向客户导出_'.date('YmdHis');        CustomerLogic::down($list_items,$excel_name);    }    /**     * 客户数据导入的模板下载     * @access public     * @return void [type]     */    public function muban(){      $rr=CustomerLogic::cus_muban();      $excel_name='客户信息导入模板';      CustomerLogic::cus_down($rr,$excel_name,2,'1.工种：工种类型  2.类型：新办/复审  3.客户等级：A类/B类/C类/D类 ');    }    /**     * 企业客户管理导入模板     */    public function muban_enter(){        $rr=CustomerLogic::enter_muban();        $excel_name='企业客户信息导入模板';        CustomerLogic::cus_down($rr,$excel_name,3,'所有字段都为必填');    }    /**     * 企业客户管理导入模板     */    public function muban_member(){        $rr=CustomerLogic::member_muban();        $excel_name='学员信息导入模板';        CustomerLogic::cus_down($rr,$excel_name,4,'1.客户类型：个人 2.工种：工种类型  3.类型：新办/复审 ');    }    /**     * 客户数据导入     * @access public     * @return mixed|void     * @throws Exception     * @since dxf     */    public function leading(){      if(var_export(Request::instance()->isAjax(), true)==='true'){          $param=input('param.');          $param['fileurl'] = ROOT_PATH.'public/'.$param['fileurl'];          $rss=CustomerLogic::uploadFile($param['fileurl'],$this->ausess());          if($rss['status']==1){            $model=new C;            $re=$model->saveAll($rss['data']);            if($re){                $this->success('数据导入成功');            }else{                $this->error('数据导入失败了');            }          }else{              ajaxReturn($this->errCode('SQLError'), $rss['msg']);          }      }else{          return  $this->fetch();      }    }    /**     * 企业客户导入     * @return mixed     * @throws Exception     */    public function leading_enter(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param=input('param.');            $param['fileurl'] = ROOT_PATH.'public/'.$param['fileurl'];            $rss=CustomerLogic::uploadFile_enter($param['fileurl'],$this->ausess());            if($rss['status']==1){                $re=db('company')->insertAll($rss['data']);                if($re){                    $this->success('数据导入成功');                }else{                    $this->error('数据导入失败了');                }            }else{                ajaxReturn($this->errCode('SQLError'), $rss['msg']);            }        }else{            return  $this->fetch();        }    }    /**     * 企业用户成员导入     * @return mixed     * @throws Exception     */    public function leading_member(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param=input('param.');            $param['fileurl'] = ROOT_PATH.'public/'.$param['fileurl'];            $rss=CustomerLogic::uploadFile_member($param['fileurl'],$this->ausess());            if($rss['status']==1){                //添加报名数据                foreach ($rss['data'] as $key=>$val){                    //用户存在                    $customer_id = (new \app\backend\model\Customer())                        ->where([                            'mobile' => $val['mobile'],                        ])                        ->value('id');                    if(!$customer_id){                        $customer = new \app\backend\model\Customer();                        unset($val['education']);unset($val['account']);unset($val['password']);unset($val['cate_id']);unset($val['expire']);                        $customer_id = $customer->insertGetId($val);                    }                    $rss['data'][$key]['customer_id'] = $customer_id;                }                $re = db('pay_student')->insertAll($rss['data']);                if($re){                    $this->success('数据导入成功');                }else{                    $this->error('数据导入失败了');                }            }else{                ajaxReturn($this->errCode('SQLError'), $rss['msg']);            }        }else{            return  $this->fetch();        }    }    /**     * 下次联系时间     */    public function nextTime(){        $param = $this->request->param();        $ids =  $param['ids'] ? $param['ids'] : false;        $next_time = $this->request->param('next_time');        if (empty($ids)){            $this->error('请选择数据');        }        if (empty($next_time)){            $this->error('请选择正确时间');        }        $data = [            'next_contact_time' => strtotime($next_time),            'follow_status' => 1        ];        $result = (new C())->where('id','in',$ids)->update($data);        if ($result){            $this->success('下次联系时间设置成功');        }    }    /**     * 跟进     * @throws \think\Exception     * @throws DbException     */    public function follow(){        $id = $this->request->param('id');        $customer = (new C())->with('admin')->where('id',$id)->find();        $customer_record = (new CustomerRecord())->where(['customer_id' => $id,'type'=>1])->order('id DESC')->select();        $this->assign([            'customer' => $customer,            'customer_record' => $customer_record        ]);        return $this->fetch();    }    /**     * 企业跟进     * @throws \think\Exception     * @throws DbException     */    public function qiye_follow(){        $id = $this->request->param('id');        $customer = (new Company())->where('id',$id)->find();        $customer['next_contact_time'] = date('Y-m-d',$customer['next_contact_time']);        $customer_record = [];        if($customer){            $customer_record = (new CustomerRecord())->where(['customer_id' => $customer['id'],'type'=>2])->order('id DESC')->select();        }        $this->assign([            'customer' => $customer,            'customer_record' => $customer_record        ]);        return $this->fetch();    }    /**     * 切换跟进     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function ajax_follow(){        $id = $this->request->param('id');        $batch = (new CompanyCustomerBatch())->where('id',$id)->find();        $customer_record = (new CustomerRecord())->where(['customer_id' => $batch['id'],'type'=>2])->order('id DESC')->select();        $this->success('获取成功','',['batch'=>$batch,'record'=>$customer_record]);    }    /**     * 客户回访记录的添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function qiye_record(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model = new CustomerRecord;            $param = $this->request->param();            $data = [                'customer_id' => $param['customer_id'],                'auid' => $this->ausess()['auid'],                'group_id' => AdminUser::where('id',$this->ausess()['auid'])->value('group_id'),                'contents' => $param['contents'],                'create_time' => time(),                'type'=>2,            ];            $result = $model->save($data);            Company::where('id',$param['customer_id'])->update(['next_contact_time'=>strtotime($param['warn_time'])]);            if ($result){                ajaxReturn(1, '跟进记录保存成功');            }else{                ajaxReturn($this->errCode('SQLError'), '页面出错了');            }        }else{            $param=input('param.');            if(isset($param['id']) && !empty($param['id'])){                $ress = CustomerRecord::where(['customer_id'=>$param['id'],'type'=>2]);            }else{                $this->error('页面出错了！');            }            $data=['id'=>$param['id'],'ress'=>$ress];            $this->assign('data',$data);            return  $this->fetch();        }    }    public function qiye_leading()    {        $id = input('id');        $this->assign('customer_id',$id);        return $this->fetch();    }    /**     * 报名缴费     * @return mixed     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function pay(){        $id = $this->request->param('id');        $customer = (new C())->with('admin')->where('id',$id)->find();        $customer['customer_id'] = $customer['id'];        if (!empty($customer['profession_id'])){            $profession = \app\backend\model\Profession::get($customer['profession_id']);            $customer['cate_id'] = $profession['cate_id'];            $customer['pid'] = $profession['pid'];        }        unset($customer['id']);        $admin = AdminUser::all();        $this->assign([            'admin' => $admin,            'data' => $customer        ]);        return $this->fetch('pay_student/add');    }    /**     * 报名缴费     * @return mixed     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function qiye_pay(){        $id = $this->request->param('id');        $customer = (new C())->with('admin')->where('id',$id)->find();        $customer['customer_id'] = $customer['id'];        if (!empty($customer['profession_id'])){            $profession = \app\backend\model\Profession::get($customer['profession_id']);            $customer['cate_id'] = $profession['cate_id'];            $customer['pid'] = $profession['pid'];        }        unset($customer['id']);        $admin = AdminUser::all();        $this->assign([            'admin' => $admin,            'data' => $customer        ]);        return $this->fetch('pay_student/qiye_add');    }    /**      * 数据提交之前的操作     * @access public      * @param  array  $data  接收的数据     * @since dxf      * @return [array]      */    protected function before_add($data){      if(empty($data['warn_time'])){        unset($data['warn_time']);      }      // 增加校区字段      if (!empty($this->campus_id)){          $data['campus_id'] = $this->campus_id;      }else{          //添加人 没有校区的  添加到第一个校区里面          $campus = \app\backend\model\Campus::all();          $data['campus_id'] = array_column($campus,'id')[0];      }      if (!empty($data['from']) && $data['from'] == 2 && empty($data['company'])){          $this->error('请输入单位名称');      }      return $data;    }    /**      * 数据提交之后的操作     * @access public      * @param  array  $data  接收的数据     * @since dxf      * @return []      */    protected function after_add($data){        //更新客户表中的状态和下次提醒时间        if(!empty($data['customer_id']) && !empty($data['cate_id'])){          $model=new C;          $updata['id']=$data['customer_id'];          $updata['cate_id']=$data['cate_id'];          $updata['warn_time']=strtotime($data['warn_time']);          $ress=$model->update_data($updata);        }    }    /**      * 数据提交之后写入数据库     * @access public      * @param  array  $data  接收的数据     * @since dxf      * @return []      */    protected function write_log($data){      if(!empty($data['customer_id'])){        $contents="添加回访数据！";      }elseif(!empty($data['cate_id'])){        $contents="添加 / 修改了客户数据，名称：$data[name]";      }else{        $contents="添加 / 修改了客户分类/来源数据，名称：$data[name]";      }      $this->writelog($contents);          }    /**      * 数据删除之后的操作     * @access public      * @param  array  $data  数据     * @since dxf      * @return []      */    protected function after_del($data){      if(!empty($data['cate_id'])){         $contents="删除了客户数据，名称：$data[name]";      }else{         $contents="删除了客户分类/来源数据：$data[name]";      }      $this->writelog($contents);    }    /**     * 客户转让记录     * @return mixed     */    public function transfer_index(){        return $this->fetch();    }    /**     * 获取客户转让记录数据     * @throws DbException     */    public function getTransferData(){        $param=input('param.');        $cus_where=CustomerLogic::selectParam($param,$this->ausess());        $auid = $cus_where['auid'];        unset($cus_where['auid']);        if (!empty($cus_where)){            $customer_ids = (new C())                ->where($cus_where)                ->column('id');        }        $where = [];        // 客户信息筛选        if (!empty($customer_ids)){            $where['customer_id'] = ['in',$customer_ids];        }        $list = (new CustomerTransfer())            ->with('oldAdmin,admins,customer')            ->where($where);        // 业务员筛选        $list = $list->where([                    'old_admin_id' => $auid,                    'admin_id' => $auid                ]            )            ->paginate($this->request->param('limit'))            ->each(function ($item){                $data = $item->toArray();                $item['customer_name'] = $data['customer']['name'];                $profession_top = Profession::where('id',$data['customer']['profession_top_id'])->value('name');                $profession = Profession::where('id',$data['customer']['profession_id'])->value('name');                $item['profession'] = $profession_top && $profession ? $profession_top.'-'.$profession : "";                $item['customer_mobile'] = $data['customer']['mobile'];                $item['from_text'] = $data['customer']['from_text'];                $item['old_admin_name'] = $data['old_admin']['real_name'];                $item['admin_name'] = $data['admins']['real_name'];            });        layuiReturn($this->errCode('OK'), '获取成功' , $list->total() ,$list->items());    }    /**     * 客户转让记录详情     * @return mixed     * @throws DbException     */    public function transfer_detail(){        $id = $this->request->param('id');        $transfer = (new CustomerTransfer())            ->with('customer,admins,oldAdmin')            ->where('id',$id)            ->find();        $this->assign([            'info' => $transfer        ]);        return $this->fetch();    }    /**     * 转让审核同意     * @throws DbException     */    public function transfer_tongyi(){        $id = $this->request->param('id');        $transfer = CustomerTransfer::get($id);        if (empty($transfer)){            $this->error('访问错误');        }        $customer = C::get($transfer['customer_id']);        if (empty($customer)){            $this->error('访问错误');        }        $customer->save([            'auid' => $transfer['admin_id'],            'group_id' => $this->ausess()['group_id']        ]);        $transfer->save([            'audit_id' => $this->ausess()['auid'],            'audit_time' => time()        ]);        $this->success();    }    /**     * 转让审核同意     * @throws DbException     */    public function transfer_jujue(){        $id = $this->request->param('id');        $transfer = CustomerTransfer::get($id);        if (empty($transfer)){            $this->error('访问错误');        }        $customer = C::get($transfer['customer_id']);        if (empty($customer)){            $this->error('访问错误');        }        $customer->save([            'auid' => $transfer['admin_id'],            'group_id' => $this->ausess()['group_id']        ]);        $transfer->save([            'audit_id' => $this->ausess()['auid'],            'audit_time' => time()        ]);        $this->success();    }    /**     * @return mixed     */    public function company()    {        return $this->fetch();    }    /**     * @throws DbException     */    public function getCompany(){        $company = new Company();        $param = input('param.');        if(isset($param['type'])){            $where = CompanyLogic::selectParam($param,$this->ausess());            $res = $company->get_join_list($param,$where);        }else{            $where = CompanyLogic::select_Param($param,$this->ausess());            $res = $company->getjoinlist($param,$where);        }        layuiReturn($this->errCode('OK'), '获取成功', $res['count'], $res['list']);    }    /**     * @return mixed     * @throws DbException     */    public function company_detail()    {        $id = $this->request->param('id');        $company = Company::get($id);        $this->assign('company',$company);        return $this->fetch();    }    /**     * 添加编辑企业信息     * @return mixed     * @throws DbException     */    public function company_edit()    {        //获取企业id        $id = $this->request->param('id');        $company = Company::get($id);        //添加或者编辑操作        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model = new Company();            $data = $this->request->param();            $data['group_id'] = $this->ausess()['group_id'];            $data['auid'] = $this->ausess()['auid'];            if(empty($data['id'])){                if($model->where('mobile',$data['mobile'])->find()){                    $this->error('该手机号客户已存在');                }                if($model->allowField(true)->save($data)) {                    $this->writelog('添加企业信息');                    $this->success('信息修改成功');                }else{                    ajaxReturn($this->errCode('SQLError'), $model->getError());                }            }else{                if($model->where('mobile',$data['mobile'])->where('id','<>',$data['id'])->find()){                    $this->error('该手机号客户已存在');                }                if($model->allowField(true)->save($data,['id' =>$data['id']]) !== false){                    $this->writelog('编辑企业信息');                    $this->success('信息修改成功');                }else{                    ajaxReturn($this->errCode('SQLError'), $model->getError());                }            }        }        $this->assign('company',$company);        return $this->fetch('customer/company_add');    }    /**     * 删除企业信息     */    public function company_delete(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $id = $this->request->param('id');            Company::where('id',$id)->delete();            $this->success('删除成功');        }    }}