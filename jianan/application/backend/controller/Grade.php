<?phpnamespace app\backend\controller;use app\backend\logic\CustomerLogic;use app\backend\logic\GradeLogic;use app\backend\model\CustomerCate;use app\backend\model\CustomerRecord;use app\backend\model\ExamStudent;use app\backend\model\GradeStudent;use app\backend\model\InvoiceLog;use app\backend\model\Occupation;use app\backend\model\OccupationStudent;use app\backend\model\OccuProfession;use app\backend\model\OccuRecord;use app\backend\model\PayLog;use app\backend\model\PayStudent as C;use app\backend\model\ProfessionCate;use app\backend\model\Read;use app\backend\model\RefundLog;use think\Db;use think\db\exception\DataNotFoundException;use think\db\exception\ModelNotFoundException;use think\Exception;use think\exception\DbException;use think\Log;use think\Request;use app\backend\model\AdminUser;use app\backend\model\Grade as G;class Grade  extends Common{    public function __construct(Request $request = null)    {        parent::__construct($request);        // 班主任        //$aulist=AdminUser::all(['group_id' => 4]);        $aulist=AdminUser::all(['group_id' => 13]);        $this->assign('aulist',$aulist);        // 工种分类        $pro_cate_list= ProfessionCate::all();        $this->assign('pro_cate_list',$pro_cate_list);        // 状态        $status = (new G)->getStatusArray();        $this->assign('status_list',$status);        //职业技能提升        $occu_profession = OccuProfession::where('pid',0)->select();        $this->assign('profession',$occu_profession);    }    /**     * 线上班级列表页面     * @return mixed     */    public function ol_index(){        return $this->fetch();    }    /**     * 获取线上班级数据     * @throws DbException     */    public function getOlData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new G())            ->with('teacher,admin,profession')            ->where($where)            ->where('train_site',1)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\Profession::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$item['profession']['name'];                //当前时间 大于开始时间 小于  结束时间 培训中                if($item['train_action_time'] < time() && $item['train_end_time'] > time()){                    \app\backend\model\Grade::where(['id'=>$item['id']])->update(['status'=>1]);                    $item['status'] = 1;                }                if($item['train_end_time'] < time()){                    \app\backend\model\Grade::where(['id'=>$item['id']])->update(['status'=>2]);                    $item['status'] = 2;                }                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 线下班级列表页面     * @return mixed     */    public function offline_index(){        return $this->fetch();    }    /**     * 获取线下班级数据     * @throws DbException     */    public function getOfflineData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new G())            ->with('teacher,admin,profession')            ->where($where)            ->where('train_site',2)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\Profession::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$item['profession']['name'];                if($item['train_action_time'] < time() && $item['train_end_time'] > time()){                    \app\backend\model\Grade::where(['id'=>$item['id']])->update(['status'=>1]);                    $item['status'] = 1;                }                if($item['train_end_time'] < time()){                    \app\backend\model\Grade::where(['id'=>$item['id']])->update(['status'=>2]);                    $item['status'] = 2;                }                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 线下班级列表页面     * @return mixed     */    public function ol_of_index(){        return $this->fetch();    }    /**     * 获取线下班级数据     * @throws DbException     */    public function getOlOfData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new G())            ->with('teacher,admin,profession')            ->where($where)            ->where('train_site',3)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\Profession::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$item['profession']['name'];                if($item['train_action_time'] < time() && $item['train_end_time'] > time()){                    \app\backend\model\Grade::where(['id'=>$item['id']])->update(['status'=>1]);                    $item['status'] = 1;                }                if($item['train_end_time'] < time()){                    \app\backend\model\Grade::where(['id'=>$item['id']])->update(['status'=>2]);                    $item['status'] = 2;                }                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 增加班级     * @return mixed     * @throws DbException     */    public function add(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model = new G();            $ress = $this->addAction($model);        }        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = G::get($param['id']);            $profession = \app\backend\model\Profession::get($res['profession_id']);            $res['cate_id'] = $profession['cate_id'];            $res['pid'] = $profession['pid'];        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign([            'res' => $res        ]);        return $this->fetch();    }    /**     * 增加班级     * @return mixed     * @throws DbException     */    public function occu_add(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $data=$this->before_add($this->dataAction());            if($data['id']){                $model = Occupation::get($data['id']);            }else{                $model = new Occupation();            }            $model->save($data);            $this->success('信息修改成功');        }        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = Occupation::get($param['id']);        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign([            'res' => $res,        ]);        return $this->fetch();    }        public function selectData(){        $id = input('cate_id');        $cate = [];        if($id){            $cate = OccuProfession::where('pid',$id)->select();        }        $this->success('','',$cate);    }    /**     * 学员详情     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function occu_stu_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new OccupationStudent())                ->where('id',$param['id'])                ->find();            $ress['profession_top'] = OccuProfession::where('id',$ress['profession_top_id'])->value('name');            $ress['profession'] = OccuProfession::where('id',$ress['profession_id'])->value('name');        }else{            $this->error('页面出错了！');        }        $href = url($this->request->param('refund')) . '?id='.$this->request->param('grade_id');        $data=['ress'=>$ress, 'param'=>$param,'refund' => $href];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 跟进     * @throws \think\Exception     * @throws DbException     */    public function follow(){        $id = $this->request->param('id');        $customer_record = (new OccuRecord())->where(['customer_id' => $id])->order('id DESC')->select();        $total_price = OccupationStudent::where('grade_id',$id)->sum('price');        $tui_price = OccuRecord::where('customer_id',$id)->sum('price');        $this->assign([            'customer_record' => $customer_record,            'id'=>$id,            'total'=>$total_price,            'tui'=>$tui_price        ]);        $read = new Read();        $read->save(['type'=>'13','title'=>'职业技能提升的退款','content'=>'您好，有新的职业技能提升的退款分账，请处理','create_time'=>time(),'url'=>'backend/Financing/ol_occu']);        return $this->fetch();    }    /**     * 客户回访记录的添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function add_record(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model = new OccuRecord();            $param = $this->request->param();            $result = false;            $data = [                'customer_id' => $param['customer_id'],                'price' => $param['price'],                'auid' => $this->ausess()['auid'],                'group_id' => AdminUser::where('id',$this->ausess()['auid'])->value('group_id'),                'contents' => $param['contents'],                'create_time' => time(),            ];            $result = $model->save($data);            if ($result){                ajaxReturn(1, '跟进记录保存成功');            }else{                ajaxReturn($this->errCode('SQLError'), '页面出错了');            }        }        //return  $this->fetch();    }     /**     * 班级详情     * @return mixed     * @throws DbException     */    public function detail(){        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = G::get($param['id']);            $profession = \app\backend\model\Profession::get($res['profession_id']);            $res['cate_id'] = $profession['cate_id'];            $res['pid'] = $profession['pid'];        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign([            'res' => $res        ]);        return $this->fetch();    }    /**     * 职业技能提升班级详情     * @return mixed     * @throws DbException     */    public function occu_detail(){        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = Occupation::get($param['id']);        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign([            'res' => $res        ]);        return $this->fetch();    }    /**     * 删除操作     */    public function delete(){        $param = $this->request->param();        if (!empty($param['id'])){            $where = ['id' => $param['id']];        }elseif(!empty($param['ids'])){            $where = ['id' => ['in',$param['ids']]];        }else{            $this->error('访问方法错误');        }        $grade_student = (new GradeStudent())            ->where([                'grade_id' => $where['id']            ])            ->find();        if (!empty($grade_student)){            $this->error('请先移除班级内成员');        }        (new G())->where($where)->delete();        $this->success('删除数据成功');    }    /**     * 班级学员列表     * @return mixed     */    public function student(){        $id = $this->request->param('id');        $this->assign([            'id' => $id        ]);        return $this->fetch();    }    /**     * 班级学员列表     * @return mixed     */    public function occu_student(){        $id = $this->request->param('id');        $this->assign([            'id' => $id        ]);        return $this->fetch();    }    /**     * 获取已选中学员     * @throws DbException     */    public function getStudentData(){        $param = $this->request->param();        $where = GradeLogic::selectStudentParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $grade =  \app\backend\model\Grade::where('id',$param['grade_id'])->find();        //自动更新结束        $pay_student_ids = \app\backend\model\GradeStudent::where('id',$param['grade_id'])->where('status','not in',[-1,1])->column('pay_student_id');        if(time() > $grade['train_end_time']){            GradeStudent::where('grade_id',$param['grade_id'])->where('status','not in',[-1,1])->update(['status'=>1]);            \app\backend\model\PayStudent::where('id','in',$pay_student_ids)->update(['status'=>4]);            $grade->save(['status'=>2]);        }        //更新培训状态        if(time() > $grade['train_action_time'] && $grade['train_end_time'] > time()){            GradeStudent::where('grade_id',$param['grade_id'])->where('status','not in',[-1,1])->update(['status'=>0]);            \app\backend\model\PayStudent::where('id','in',$pay_student_ids)->update(['status'=>3]);            $grade->save(['status'=>1]);        }        if(time() < $grade['train_action_time']){            GradeStudent::where('grade_id',$param['grade_id'])->where('status','not in',[-1,1])->update(['status'=>2]);            \app\backend\model\PayStudent::where('id','in',$pay_student_ids)->update(['status'=>2]);            $grade->save(['status'=>0]);        }        //查找培训信息        $list = (new GradeStudent())            ->with('payStudent')            ->where($where)            ->paginate($param['limit']);        $data = $list->items();        foreach ($data as $k => $v){            // 增加学员关联的业务员及报名资料            $profession_id = $v['pay_student']['profession_id'];            $admin_id = $v['pay_student']['auid'];            $profession = \app\backend\model\Profession::get($profession_id);            $profession_top = \app\backend\model\Profession::get($profession['pid']);            $admin = AdminUser::get($admin_id);            $data[$k]['profession'] = $profession;            $data[$k]['profession_name'] = $profession_top['name'] . ' - - ' . $profession['name'];            $data[$k]['admin'] = $admin;            if($v['status'] == 0){                $data[$k]['status_text'] = time() < $grade['train_action_time'] ? '可培训' : '培训中';            }        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 获取已选中学员     * @throws DbException     */    public function getStudent(){        $param = $this->request->param();        $where = GradeLogic::selectStudent($param);        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new OccupationStudent())            ->where($where)            ->paginate($param['limit']);        $data = $list->items();        foreach ($data as $k => $v){            // 增加学员关联的业务员及报名资料            $profession_id = $v['profession_id'];            $profession_top_id = $v['profession_top_id'];            $profession = \app\backend\model\OccuProfession::get($profession_id);            $profession_top = \app\backend\model\OccuProfession::get($profession_top_id);            $data[$k]['profession_name'] = $profession_top['name'] . ' - - ' . $profession['name'];        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 客户数据导入     * @access public     * @return mixed|void     * @throws Exception     * @since dxf     */    public function leading(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param=input('param.');            $param['fileurl'] = ROOT_PATH.'public/'.$param['fileurl'];            $grade = $param['grade_id'];            if (!empty($this->campus_id)){                $campus_id = $this->campus_id;            }else{                $campus = \app\backend\model\Campus::all();                $campus_id = array_column($campus,'id')[0];            }            $rss=GradeLogic::uploadFile($param['fileurl'],$campus_id,$grade);            if($rss['status']==1){                $model=new \app\backend\model\OccupationStudent();                $re=$model->saveAll($rss['data']);                //待办事件的消息                $read = new Read();                //职业技能提升的补偿                $read->save(['type'=>'12','title'=>'职业技能提升的补偿','content'=>'您好，有新的职业技能提升学员导入，请前往审核此次补偿','create_time'=>time(),'url'=>'backend/Financing/ol_occu']);                if($re){                    $this->success('数据导入成功');                }else{                    $this->error('数据导入失败了');                }            }else{                ajaxReturn($this->errCode('SQLError'), $rss['msg']);            }        }else{            $grade = input('param.grade_id');            $this->assign('grade_id',$grade);            return  $this->fetch();        }    }    /**     * 客户数据导入的模板下载     * @access public     * @return void [type]     */    public function muban(){        $rr = GradeLogic::muban();        $excel_name='职业技能提升学员导入模板';        GradeLogic::down($rr,$excel_name,'1.人员类别:个人,其他,劳动者,企业职工,退役军人,2:项目类别:社评,专项,建筑工匠,');    }    /**     * 移出班级内学员     */    public function studentDelete(){        $param = $this->request->param();        // 删除学员关联关系并更改学员状态，减少班级学员人数        Db::startTrans();        try {            $grade_student = GradeStudent::get($param['id']);            $grade = G::get($grade_student['grade_id']);            $update_data = [];            if ($grade['train_site'] == 1){                $update_data['ol_status'] = 2;            }else{                $update_data['offline_status'] = 2;            }            // 更改学员状态            (new C())                ->where('id','in',$grade_student['pay_student_id'])                ->update($update_data);            // 减少班级学员人数            (new G())                ->where('id',$grade_student['grade_id'])                ->setDec('pay_student_num',1);            // 删除关联关系            $grade_student->delete();            Db::commit();        }catch (Exception $exception){            Db::rollback();            Log::write('学员删除:' . json_encode($exception->getMessage()));        }        $this->success('学员已移出班级');    }    /**     * 选择学员     * @return mixed     */    public function studentCheck(){        //班级        $grade_id = $this->request->param('grade_id');        //学生id        $id = $this->request->param('id');        $this->assign([            'grade_id' => $grade_id,            'id' => $id        ]);        return $this->fetch();    }    /**     * 获取待培训学员数据     * @throws DbException     */    public function getStudentCheckData(){        $param = $this->request->param();        $where = GradeLogic::selectStudentCheckParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $other_where = ['status' => 2];        if (!empty($param['grade_id'])){            //查下班级信息            $grade = \app\backend\model\Grade::get($param['grade_id']);            if ($grade['train_site'] == 1){                //线上培训待培训                $other_where['ol_status'] = 2;            }elseif ($grade['train_site'] == 2){                //线下培训待培训                $other_where['offline_status'] = 2;            }elseif ($grade['train_site'] == 3){                //线上线下培训                $other_where['ol_of_status'] = 2;            }            //校区id            if (!empty($grade['campus_id'])){                $where['campus_id'] = $grade['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $where['campus_id'] = array_column($campus,'id')[0];            }            //班级的工种            $where['profession_id'] = $grade['profession_id'];        }        $student_ids = GradeStudent::where('grade_id',$param['grade_id'])->column('pay_student_id');        $list = (new C())            ->with('admin,profession')            ->where($other_where)            ->where('id','not in',$student_ids)            ->where($where)            ->order('id ASC')            ->paginate($param['limit']);        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 批量可考试     * @throws Exception     */    public function stu_exam()    {        //培训的学生id        $ids = input('ids');        //培训班id        $grade_id = input('grade_id');        //关联的学员id        $pay_student_ids = GradeStudent::where('id','in',$ids)->column('pay_student_id');        //更新对应的学员状态  为可考试        \app\backend\model\PayStudent::where('id','in',$pay_student_ids)->update(['status'=>4]);        //计算未结束的学生        $count = \app\backend\model\GradeStudent::where('grade_id',$grade_id)->where('status','in',[0,2])->count();        if($count == 0){            //如果未结束的是0   更新班级的状态            \app\backend\model\Grade::where('id',$grade_id)->update(['status'=>2]);        }        //培训班学生的状态        \app\backend\model\GradeStudent::where('id','in',$ids)->update(['status'=>1]);        $this->success('设置成功');    }    /**     * 选中学员添加进班级     * @throws DbException     * @throws Exception     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function check_student_ids(){        $param = $this->request->param();        if (empty($param['grade_id'])){            $this->error('班级不存在');        }        $grade = G::get($param['grade_id']);        // 班级内已有学员人数        $grade_student_count = (new GradeStudent())            ->where('grade_id',$param['grade_id'])            ->count();        // 批量添加        if (!empty($param['did'])){            $did = is_array($param['did']) ? $param['did'] : (strpos($param['did'],',') != false ? explode(',',$param['did']) : [$param['did']]);            foreach ($did as $k => $v){                $data = [                    'grade_id' => $param['grade_id'],                    'pay_student_id' => $v                ];                // 增加校区字段                if (!empty($this->ausess()['campus_id'])){                    $data['campus_id'] = $this->ausess()['campus_id'];                }else{                    $campus = \app\backend\model\Campus::all();                    $data['campus_id'] = array_column($campus,'id')[0];                }                $student_list[] = $data;            }            $pay_student = (new C())                ->where('id','in',$did)                ->select();        }        // 单个选择        if (!empty($param['id'])){            $did = $param['id'];            $data = [                'grade_id' => $param['grade_id'],                'pay_student_id' => $param['id']            ];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $data['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $data['campus_id'] = array_column($campus,'id')[0];            }            $student_list[] = $data;            $pay_student = (new C())                ->where('id',$param['id'])                ->select();        }        // 根据学员信息判断是否可添加        foreach ($pay_student as $k => $v){            // 工种不同            if ($v['profession_id'] != $grade['profession_id']){                $this->error($v['name'] . '的工种与班级工种不匹配');            }            // 学员状态异常            if ($v['status'] != 2){                $this->error($v['name'] . '状态异常');            }            // 学员如果已经被选中            $grade_status = (new GradeStudent())                ->where('pay_student_id',$v['id'])                ->find();            $grade_join = G::get($grade_status['grade_id']);            if (!empty($grade_status) && $grade['train_site'] == $grade_join['train_site']){                $this->error($v['name'] . '已参加其他班级');            }        }        $new_student_count = count($student_list);        // 判断人数上限        $total = $grade_student_count + $new_student_count;        // 如果更换学员，人数需要减一        if (!empty($param['student_id'])){            $total = $total - 1 ;        }        if ($grade['student_num'] < $total){            $this->error('班级学员人数上限:'.$grade['student_num'].'，本次添加后学员人数:' . $total);        }        // 增加班级学员关联及班级学员人数        Db::startTrans();        try {            // 增加班级学员关联            (new GradeStudent())->saveAll($student_list);            if (empty($param['student_id'])){                // 增加班级学员人数                $grade->setInc('pay_student_num',$new_student_count);            }            // 修改学员状态            if ($grade['train_site'] == 1){                $student_data['offline_status'] = 1;                $student_data['ol_of_status'] = 1;            }elseif ($grade['train_site'] == 2){                //如果她是线上班级  让他的线下班级  状态变成培训完成                $student_data['ol_status'] = 1;                $student_data['ol_of_status'] = 1;            }elseif($grade['train_site'] == 3){                //如果她是线上班级  让他的线下班级  状态变成培训完成                $student_data['ol_status'] = 1;                $student_data['ol_status'] = 1;            }            (new C())                ->where('id','in',$did)                ->update($student_data);            if (!empty($param['student_id'])){                // 如果更换学员把旧学员关联删除                (new GradeStudent())->where([                    'grade_id' => $grade['id'],                    'pay_student_id' => $param['student_id']                ])->delete();                // 修改旧学员状态                (new C())                    ->where('id',$param['student_id'])                    ->update([                        'status' => 2                    ]);            }            Db::commit();        }catch (Exception $exception){            Db::rollback();            Log::write('添加班级学员：' . json_encode($exception->getMessage()));            $this->error('系统错误');        }        $this->success('学员已添加进班级');    }    /**     * 班级课程完成     * @throws DbException     */    public function end(){        $id = $this->request->param('id');        $grade = G::get($id);        $student_ids = (new GradeStudent())//                ->where([//                    'contact_status' => 1,//                    'status' => 0//                ])            ->where('status','in',[0,2])            ->column('pay_student_id');        $data = [];        // 根据可考试状态修改学员状态        if ($grade['student_status'] == 1){            $data = ['status' => 4];        }        if ($grade['train_site'] == 1){            $data['ol_status'] = 1;        }elseif($grade['train_site'] == 2){            $data['offline_status'] = 1;        }elseif ($grade['train_site'] == 3){            $data['ol_of_status'] = 1;        }        if($student_ids){            if($grade['student_status'] == 1){                $read = new Read();                $read->save(['user_id'=>$grade['admin_id'],'type'=>2,'title'=>'待考试通知','content'=>'您好，您的客户待考试，请尽快处理','create_time'=>time(),'url'=>'']);            }            (new C())->where('id','in',$student_ids)->update($data);            //(new C())->whereIn('id',$student_ids)->update($data);        }        // 修改班级状态        $grade->save([            'status' => 2,            'train_end_time' => time()        ]);        GradeStudent::where('pay_student_id','in',$student_ids)->update(['status'=>1]);        $this->success('班级课程已完成');    }    /**     * 学员详情     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function student_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession,professionTop')                ->where('id',$param['id'])                ->find();        }else{            $this->error('页面出错了！');        }        $profession_fields = explode(',',$ress['profession_fields']);        $field_ids = (new \app\backend\model\ProfessionFields())            ->where('id','in',$ress['profession']['field_ids'])            ->select();        foreach ($field_ids as $k => $v){            if (in_array($v['id'],$profession_fields)){                $field_ids[$k]['checked'] = true;            }        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,        ]);        $href = url($this->request->param('refund')) . '?id='.$this->request->param('grade_id');        $data=['ress'=>$ress, 'param'=>$param,'refund' => $href];        $this->assign('data',$data);        $this->assign('field_ids',$field_ids);        return  $this->fetch();    }    /**     * 修改学员真实状态     * @throws DbException     */    public function chang_status()    {        $id = $this->request->param('id');        $grade_student = GradeStudent::get($id);        (new C())->where('id',$grade_student['pay_student_id'])->update([            'status' => 4,            'offline_status' => 1,            'ol_status' => 1        ]);        $grade_student->save([            'status' => 1        ]);        $grade = \app\backend\model\Grade::get($grade_student['grade_id']);        $read = new Read();        $read->save(['user_id'=>$grade['admin_id'],'type'=>2,'title'=>'待考试通知','content'=>'您好，您的客户待考试，请尽快处理','create_time'=>time(),'url'=>'']);        $this->success('此学员培训已结束，请安排考试');    }    /**     * 修改学员培训状态     * @throws DbException     */    public function chang_grade_status(){        $id = $this->request->param('id');        $grade_student = GradeStudent::get($id);        $grade = G::get($grade_student['grade_id']);        if ($grade['train_site'] == 1){            $update_data = [                'ol_status' => 1            ];            $str = '线上';        }elseif($grade['train_site'] == 2){            $update_data = [                'offline_status' => 1            ];            $str = '线下';        }elseif ($grade['train_site'] == 3){            $update_data = [                'ol_of_status' => 1            ];            $str = '线上线下';        }        $grade_student->save([           'status' => 1        ]);        (new C())->where('id',$grade_student['pay_student_id'])->update($update_data);        $this->success('此学员'.$str.'培训已结束');    }    /**     * 异常报备     * @return mixed     * @throws DbException     */    public function abnormal(){        if ($this->request->isPost()){            $param = $this->request->param();            $grade = G::get($param['grade_id']);            $check_data = [                'grade_id' => $grade['id'],                'teacher_id' => $grade['teacher_id'],                'student_id' => $param['id'],                'profession_id' => $grade['profession_id'],                'anomalous_cause' => $param['anomalous_cause'],                'admin_id' => $this->ausess()['auid']            ];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $check_data['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $check_data['campus_id'] = array_column($campus,'id')[0];            }            //首先查异常记录            $log = \app\backend\model\GradeCheck::where(['grade_id'=>$grade['id'],'student_id'=>$param['id']])->find();            //有记录被拒绝   或者没记录  添加            if((isset($log) && $log['status'] == 2) || !$log){                (new \app\backend\model\GradeCheck())->allowField(true)->save($check_data);                $this->success('异常报备成功');            }else if($log['status'] == 0){                //未处理  修改                $log->save($check_data);            }else{                //审核过 不操作                $this->error('该学生已是异常状态');            }        }        $this->assign([            'id' => $this->request->param('id'),            'grade_id' => $this->request->param('grade_id'),        ]);        return $this->fetch();    }    /**     * @param $data     * @return mixed|array     */    public function before_add($data){        // 培训时间        $data['train_action_time'] = !is_numeric($data['train_action_time']) ? strtotime($data['train_action_time']) : $data['train_action_time'];        if (empty($data['train_end_time'])){            ajaxReturn($this->errCode('SQLError'), '培训结束时间不能为空');        }        if (empty($data['train_action_time'])){            ajaxReturn($this->errCode('SQLError'), '培训开始时间不能为空');        }        $data['train_end_time'] = !is_numeric($data['train_end_time']) ? strtotime($data['train_end_time']) : $data['train_end_time'];        // 培训天数        $train_day = (int)$data['train_end_time'] - (int)$data['train_action_time'];        $data['train_day'] = $train_day / 24 / 3600;        // 创建人        $data['admin_id'] = $this->ausess()['auid'];        // 增加校区字段        if (!empty($this->ausess()['campus_id'])){            $data['campus_id'] = $this->ausess()['campus_id'];        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $data['campus_id'] = array_column($campus,'id')[0];        }        return $data;    }    /**     * @param $data     */    public function after_add($data){    }    /**     * @param $data     */    protected function write_log($data){    }    /**     * @param $data     */    protected function after_del($data){    }}