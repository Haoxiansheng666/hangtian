<?phpnamespace app\backend\controller;use app\backend\logic\GradeLogic;use app\backend\model\AdminDeduct;use app\backend\model\ExamCheck;use app\backend\model\ExamStudent;use app\backend\model\GradeStudent;use app\backend\model\InvoiceLog;use app\backend\model\PayLog;use app\backend\model\PayStudent as C;use app\backend\model\ProfessionCate;use app\backend\model\Read;use app\backend\model\RefundLog;use think\Db;use think\db\exception\DataNotFoundException;use think\db\exception\ModelNotFoundException;use think\Exception;use think\exception\DbException;use think\Log;use think\Request;use app\backend\model\AdminUser;use app\backend\model\Grade as G;use app\backend\model\Exam as E;class Exam  extends Common{    public function __construct(Request $request = null)    {        parent::__construct($request);        // 班主任       // $aulist=AdminUser::all(['group_id' => 4]);        $aulist=AdminUser::all(['group_id' => 13]);        $this->assign('aulist',$aulist);        // 工种分类        $pro_cate_list= ProfessionCate::all();        $this->assign('pro_cate_list',$pro_cate_list);        // 状态        $status = (new G)->getStatusArray();        $this->assign('status_list',$status);    }    /**     * 未开始考试计划列表页面     * @return mixed     */    public function no_start_index(){        return $this->fetch();    }    /**     * 获取未开始考试计划列表     * @throws DbException     */    public function getNData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }        $list = (new E())            ->with('teacher,admin,profession')            ->where($where)            ->where('status',0)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\Profession::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$item['profession']['name'];                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 线下班级列表页面     * @return mixed     */    public function end_index(){        return $this->fetch();    }    /**     * 获取已结束考试计划数据     * @throws DbException     */    public function getEData(){        $where = GradeLogic::selectParam($this->request->param(),$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }        $list = (new E())            ->with('teacher,admin,profession')            ->where($where)            ->where('status',1)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\Profession::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$item['profession']['name'];                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 增加班级     * @return mixed     * @throws DbException     */    public function add(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model=new E();            $ress=$this->addAction($model);        }        $param = $this->request->param();        $res = [];        if (!empty($param['id'])){            $res = E::get($param['id']);            $profession = \app\backend\model\Profession::get($res['profession_id']);            $res['cate_id'] = $profession['cate_id'];            $res['pid'] = $profession['pid'];        }        // 指定培训地点  线上|线下        if (!empty($param['train_site'])){            $res['train_site'] = $param['train_site'];        }        $this->assign([            'res' => $res        ]);        return $this->fetch();    }    /**     * 删除操作     */    public function delete(){        $param = $this->request->param();        if (!empty($param['id'])){            $where = ['id' => $param['id']];        }elseif(!empty($param['ids'])){            $where = ['id' => ['in',$param['ids']]];        }else{            $this->error('访问方法错误');        }        $grade_student = (new GradeStudent())            ->where([                'grade_id' => $where['id']            ])            ->find();        if (!empty($grade_student)){            $this->error('请先移除班级内成员');        }        (new G())->where($where)->delete();        $this->success('删除数据成功');    }    /**     * 班级学员列表     * @return mixed     */    public function student(){        $id = $this->request->param('id');        $this->assign([            'id' => $id        ]);        return $this->fetch();    }    /**     * 获取已选中学员     * @throws DbException     */    public function getStudentData(){        $param = $this->request->param();        $where = GradeLogic::selectStudentParam($param,$this->ausess());        if (!empty($param['exam_id'])){            $where['exam_id'] = $param['exam_id'];        }        $list = (new ExamStudent())            ->with('payStudent')            ->where($where)            ->order('id DESC')            ->paginate($param['limit']);        $data = $list->items();        foreach ($data as $k => $v){            // 增加学员关联的业务员及报名资料            $profession_id = $v['pay_student']['profession_id'];            $admin_id = $v['pay_student']['auid'];            $profession = \app\backend\model\Profession::get($profession_id);            $profession_top = \app\backend\model\Profession::get($profession['pid']);            $admin = AdminUser::get($admin_id);            $data[$k]['profession'] = $profession;            $data[$k]['profession_name'] = $profession_top['name'] . ' - - ' . $profession['name'];            $data[$k]['admin'] = $admin;            $data[$k]['result'] = $v['practical_result'] == 0 ? "未考试" : (($v['practical_result'] == 1 && $v['theory_result'] == 1) ? "考试通过" : (($v['practical_result'] == 2 || $v['theory_result'] == 2) ? "考试未通过" : "弃考"));        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 已结束考试学员列表     * @return mixed     */    public function end_student(){        $id = $this->request->param('id');        $this->assign([            'id' => $id        ]);        return $this->fetch();    }    /**     * 考试成绩修改     * @return mixed     * @throws DbException     */    public function exam_result()    {        if ($this->request->isPost()){            $param = $this->request->param();            // 判断是否有缺少数据            if (empty($param['theory_result'])){                $this->error('请选择理论成绩');            }            if (empty($param['practical_result'])){                $this->error('请选择实操成绩');            }            if (empty($param['ids'])){                $this->error('考试成员不存在 ');            }            $exam_student = ExamStudent::all([                'id' => ['in',$param['ids']]            ]);            Db::startTrans();            try {                unset($param['ids']);                $students = [];                foreach ($exam_student as $k => $v){                    $student = (new C())                        ->with('admin')                        ->where(['id' => $v['pay_student_id']])                        ->find();                    // 考试未通过                    if ($param['theory_result'] != 1 || $param['practical_result'] != 1){                        $param['status'] = '-2';                    }else{                        $param['status'] = 7;                    }                    // 考生已经设置过成绩                    //if (!empty($student['theory_result']) || !empty($student['practical_result'])){                    //if (!empty($v['theory_result']) || !empty($v['practical_result'])){                    if ((!empty($v['theory_result']) || !empty($v['practical_result'])) && in_array($student['status'],[4,5,6])){                        continue;                    }                    if(!in_array($student['auid'],$students)){                        array_push($students,$student['auid']);                    }                    // 修改学员考试状态                    $student->allowField(true)->save($param);                    // 修改考试计划成员考试状态                    $param['exam_result_time'] = time();                    $param['exam_result_admin_id'] = $this->ausess()['auid'];                    $v->allowField(true)->save($param);                    // 给业务员发放提成                    $profession = \app\backend\model\Profession::get($student['profession_id']);                    if (!empty($profession['admin1_deduct']) && $student['admin']['department_id'] == 1){                        // 业务部提成                        $deduct = $profession['price'] * $profession['admin1_deduct'] / 100;                    }elseif (!empty($profession['admin2_deduct']) && $student['admin']['department_id'] == 11){                        // 网络部提成                        $deduct = $profession['price'] * $profession['admin2_deduct'] / 100;                    }elseif (!empty($profession['admin3_deduct']) && $student['admin']['department_id'] == 12){                        // 大客户部提成                        $deduct = $profession['price'] * $profession['admin3_deduct'] / 100;                    }                    if (!empty($deduct)){                        $deduct_data = [                            'campus_id' => $student['campus_id'],                            'exam_id' => $v['exam_id'],                            'profession_id' => $student['profession_id'],                            'pay_student_id' => $student['id'],                            'admin_id' => $student['admin']['department_id'],                            'price' => !empty($deduct) ? $deduct : 0,                        ];                        (new AdminDeduct())->save($deduct_data);                    }                    // 考试通过学员进入就业人员审核                    if ($param['status'] == 7){                        $labour = [                            'pay_student_id' => $student['id'],                            'name' => $student['name'],                            'mobile' => $student['mobile'],                            'id_card' => $student['id_card'],                            'work_exp' => '无无工作经验',                            'profession_id' => $student['profession_id'],                            'salesman_id' => $student['auid'],                            'status' => 0,                            'create_time' => time()                        ];                        (new \app\backend\model\LabourUser())->save($labour);                    }                }                $read = new Read();                foreach ($students as $item){                    if($param['status'] == -2){                        $read->save(['user_id'=>$item,'type'=>'18','title'=>'考试不合格','content'=>'您好，你的客户考试不合格，请尽快处理','create_time'=>time(),'url'=>'']);                    }elseif($param['status'] == 7){                        $read->save(['user_id'=>$item,'type'=>'5','title'=>'考试通过通知','content'=>'您好，你的客户考试已通过，请尽快处理','create_time'=>time(),'url'=>'']);                    }                }                Db::commit();            }catch (Exception $exception){                Db::rollback();                Log::write('考试计划成绩:'.json_encode($exception->getMessage()));            }            $this->success('成绩设置成功');        }        $ids = $this->request->param('ids');        $ids = implode(',',json_decode($ids,true));        $this->assign([            'ids' => $ids        ]);        return $this->fetch();    }    /**     * 移出班级内学员     */    public function studentDelete(){        $param = $this->request->param();        // 删除学员关联关系并更改学员状态，减少班级学员人数        Db::startTrans();        try {            $grade_student = ExamStudent::get($param['id']);            $update_data = [                'status' => 4            ];            // 更改学员状态            (new C())                ->where('id','in',$grade_student['pay_student_id'])                ->update($update_data);            // 减少班级学员人数            (new E())                ->where('id',$grade_student['exam_id'])                ->setDec('actual_student_num',1);            // 删除关联关系            $grade_student->delete();            Db::commit();        }catch (Exception $exception){            Db::rollback();            Log::write('学员删除:' . json_encode($exception->getMessage()));        }        $this->success('学员已移出考试计划');    }    /**     * 选择学员     * @return mixed     */    public function studentCheck(){        $id = $this->request->param('id');        $exam_id = $this->request->param('exam_id');        $this->assign([            'id' => $id,            'exam_id' => $exam_id,        ]);        return $this->fetch();    }    /**     * 获取待培训学员数据     * @throws DbException     */    public function getStudentCheckData(){        $param = $this->request->param();        $where = GradeLogic::selectStudentCheckParam($param,$this->ausess());        $exam = E::get($param['exam_id']);        if (!empty($exam['campus_id'])){            $where['campus_id'] = $exam['campus_id'];        }        $where['profession_id'] = $exam['profession_id'];        $other_where = ['status' => 4];        $list = (new C())            ->with('admin,profession')            ->where($other_where)            ->where($where)            ->order('create_time ASC')            ->paginate($param['limit'])            ->each(function ($item){                $profession_top = \app\backend\model\Profession::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$item['profession']['name'];                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 选中学员添加进班级     * @throws DbException     * @throws Exception     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function check_student_ids(){        $param = $this->request->param();        if (empty($param['exam_id'])){            $this->error('考试计划不存在');        }        $grade = E::get($param['exam_id']);        // 班级内已有学员人数        $grade_student_count = (new ExamStudent())            ->where('exam_id',$param['exam_id'])            ->count();        // 批量添加        if (!empty($param['did'])){            $did = is_array($param['did']) ? $param['did'] : (strpos($param['did'],',') != false ? explode(',',$param['did']) : [$param['did']]);            foreach ($did as $k => $v){                $data = [                    'exam_id' => $param['exam_id'],                    'pay_student_id' => $v                ];                // 增加校区字段                if (!empty($this->ausess()['campus_id'])){                    $data['campus_id'] = $this->ausess()['campus_id'];                }else{                    $data['campus_id'] = 1;                }                $student_list[] = $data;            }            $pay_student = (new C())                ->where('id','in',$did)                ->select();        }        // 单个选择        if (!empty($param['id'])){            $did = $param['id'];            $data = [                'exam_id' => $param['exam_id'],                'pay_student_id' => $param['id']            ];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $data['campus_id'] = $this->ausess()['campus_id'];            }else{                $data['campus_id'] = 1;            }            $student_list[] = $data;            $pay_student = (new C())                ->where('id',$param['id'])                ->select();        }        // 根据学员信息判断是否可添加        foreach ($pay_student as $k => $v){            // 工种不同            if ($v['profession_id'] != $grade['profession_id']){                $this->error($v['name'] . '的工种与班级工种不匹配');            }            // 学员状态异常            if ($v['status'] != 4){                $this->error($v['name'] . '状态异常');            }            // 学员如果已经被选中            $grade_status = (new ExamStudent())                ->where('pay_student_id',$v['id'])                ->where('theory_result in (0,1) OR practical_result in (0,1)')                ->find();            if (!empty($grade_status)){                $this->error($v['name'] . '已参加其他考试计划');            }        }        $new_student_count = count($student_list);        // 判断人数上限        $total = $grade_student_count + $new_student_count;        // 如果更换学员，人数需要减一        if (!empty($param['student_id'])){            $total = $total - 1 ;        }        if ($grade['student_num'] < $total){            $this->error('考试计划学员人数上限:'.$grade['student_num'].'，本次添加后学员人数:' . $total);        }        // 增加班级学员关联及班级学员人数        Db::startTrans();        try {            // 增加班级学员关联            (new ExamStudent())->saveAll($student_list);            if (empty($param['student_id'])){                // 增加班级学员人数                $grade->setInc('actual_student_num',$new_student_count);            }            // 修改学员状态            $student_data = [                'status' => 5,                'exam_time' => $grade['exam_time']            ];            (new C())                ->where('id','in',$did)                ->update($student_data);            if (!empty($param['student_id'])){                // 如果更换学员把旧学员关联删除                (new ExamStudent())->where([                    'exam_id' => $grade['id'],                    'pay_student_id' => $param['student_id']                ])->delete();                // 修改旧学员状态                (new C())                    ->where('id',$param['student_id'])                    ->update([                        'status' => 4                    ]);            }            Db::commit();        }catch (Exception $exception){            Db::rollback();            Log::write('添加考试学员：' . json_encode($exception->getMessage()));            $this->error('系统错误');        }        $this->success('学员已添加进考试计划');    }    /**     * 学员详情     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function student_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession')                ->where('id',$param['id'])                ->find();        }else{            $this->error('页面出错了！');        }        $profession_fields = explode(',',$ress['profession_fields']);        $field_ids = (new \app\backend\model\ProfessionFields())            ->where('id','in',$ress['profession']['field_ids'])            ->select();        foreach ($field_ids as $k => $v){            if (in_array($v['id'],$profession_fields)){                $field_ids[$k]['checked'] = true;            }        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,        ]);        $href = url($this->request->param('refund')) . '?id='.$this->request->param('exam_id');        $data=['ress'=>$ress, 'param'=>$param,'refund' => $href];        $this->assign('data',$data);        $this->assign('field_ids',$field_ids);        return  $this->fetch();    }    /**     * 修改学员真实状态     * @throws DbException     */    public function chang_status(){        $id = $this->request->param('id');        $grade_student = GradeStudent::get($id);        (new C())->where('id',$grade_student['pay_student_id'])->update([            'status' => 4        ]);        $this->success('此学员培训已结束，请安排考试');    }    /**     * 修改学员培训状态     * @throws DbException     */    public function chang_grade_status(){        $id = $this->request->param('id');        $grade_student = GradeStudent::get($id);        $grade = G::get($grade_student['grade_id']);        if ($grade['train_site'] == 1){            $update_data = [                'ol_status' => 1            ];            $str = '线上';        }else{            $update_data = [                'offline_status' => 1            ];            $str = '线下';        }        (new C())->where('id',$grade_student['pay_student_id'])->update($update_data);        $this->success('此学员'.$str.'培训已结束');    }    /**     * 异常报备     * @return mixed     * @throws DbException     */    public function abnormal(){        if ($this->request->isPost()){            $param = $this->request->param();            $grade = E::get($param['exam_id']);            $check_data = [                'exam_id' => $grade['id'],                'teacher_id' => $grade['teacher_id'],                'student_id' => $param['id'],                'profession_id' => $grade['profession_id'],                'anomalous_cause' => $param['anomalous_cause'],                'admin_id' => $this->ausess()['auid']            ];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $check_data['campus_id'] = $this->ausess()['campus_id'];            }else{                $check_data['campus_id'] = 1;            }            (new ExamCheck())->allowField(true)->save($check_data);            $this->success('异常报备成功');        }        $this->assign([            'id' => $this->request->param('id'),            'exam_id' => $this->request->param('exam_id'),        ]);        return $this->fetch();    }    /**     * 考试计划自定义结束     * @throws DbException     */    public function end(){        // 更新考试状态        $exam = E::get($this->request->param('id'));        if (empty($exam)){            $this->error('考试计划不存在');        }        $exam->status = 1;        $exam->exam_end_time = time();        $exam->save();        // 更新学员状态        $student = ExamStudent::all([            'exam_id' => $exam['id']        ]);        foreach ($student as $k => $v){            $pay_student = C::get($v['pay_student_id']);            $pay_student->status = 6;            $pay_student->save();        }        $this->success('考试计划状态更改为：已结束');    }    /**     * @param $data     * @return mixed|array     */    public function before_add($data){        // 考试时间        if(!empty($data['exam_time'])){            $data['exam_time'] = strtotime($data['exam_time']);        }        // 创建人        $data['admin_id'] = $this->ausess()['auid'];        // 增加校区字段        if (!empty($this->ausess()['campus_id'])){            $data['campus_id'] = $this->ausess()['campus_id'];        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $data['campus_id'] = array_column($campus,'id')[0];        }        return $data;    }    /**     * @param $data     */    public function after_add($data){    }    /**     * @param $data     */    protected function write_log($data){    }    /**     * @param $data     */    protected function after_del($data){    }}