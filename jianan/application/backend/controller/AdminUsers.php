<?phpnamespace app\backend\controller;use app\backend\model\AdminDepartment;use think\Controller;use think\Db;use think\Request;use app\backend\model\Config;use app\backend\model\AdminUser;use app\backend\model\AuthGroup;use app\backend\logic\AdminUsersLogic;class AdminUsers  extends Common{    public function __construct(Request $request = null)    {        parent::__construct($request);        // 校区        $campus_list = \app\backend\model\Campus::all();        // 部门        $department_list = AdminDepartment::all();        $this->assign([            'campus_list' => $campus_list,            'department_list' => $department_list        ]);    }    /**     * 账号管理列表界面     * @access public     * @return mixed     */    public function adminList(){        $ausess=$this->ausess();        $select=AdminUsersLogic::selectParam($ausess);        if (!empty($this->campus_id)){            $select['where']['campus_id'] = $this->campus_id;        }        $dataress=AdminUser::stDate($select['where']);        $group_list = AuthGroup::groupList();        $data=[            'data'=>$dataress,            'param'=>$select['param'],            'group_role_name'=>config('group_role_name'),            'gp_role'=>$ausess['group_role'],            'group_list'=>$group_list        ];        $this->assign('data',$data);        return  $this->fetch();    }    /**      * 添加和编辑账号界面     * @access public      * @since dxf      * @return [type] 页面      */      public function adminAdd(){        $ausess=$this->ausess();        if(Request::instance()->isPost()===true){            $data=$this->dataAction();            $where = [                'admin_name' => $data['admin_name'],                'campus_id' => $data['campus_id']            ];            if (!empty($data['id'])){                $where['id'] = ['<>',$data['id']];            }            $admin = (new AdminUser())->where($where)->find();            if (!empty($admin)){                $this->error('该校区内已存在此管理员账号');            }            $pmodel=new AdminUser;            //默认密码123456            $data['admin_password']=password_encrypt('123456', config('salt_admin'));            //写入logo            $content="编辑修改了数据，账号为：".$data['admin_name'].",真实姓名为：".$data['real_name'];            $this->writeLog($content);            //添加或者修改            if(empty($data['id'])){                if ($pmodel->allowField(true)->validate(true)->save($data)) {                    $this->success('操作成功');               }else{                    $this->error($pmodel->getError());               }            }else{                if($data['id']==1){                    //超级管理员信息禁止修改                    $this->error('权限不足');                }                if($pmodel->allowField(true)->validate(true)->save($data,['id' =>$data['id']])){                    $this->success('操作成功');                }else{                    $this->error($pmodel->getError());                }            }        }        $param=Request::instance()->get();        if($param['id']){            $data= Db::name('admin_user')->where('id',$param['id'])->find();        }else{            $data['id']='';            $data['status']=1;            $data['sex']=1;            $data['group_id']='';            $data['campus_id']='';            $data['pid']='';            $data['department_id']='';        }        $data['gp_role']=$ausess['group_role'];        $this->assign('data',$data);        return  $this->fetch();    }        /**      * 删除账号     * @access public      * @since dxf      * @return [type] [json]     */    public function adminDelete(){        if(Request::instance()->isPost()===true){            $data=$this->dataAction();            if($data['id']==1){                ajaxReturn($this->errCode('SQLError'), '该账号禁止删除！');            }            $ress=$this->del('admin_user');            return $ress;        }    }    /**      * 重置密码     * @access public      * @since dxf      * @return [type] 页面      */      public function editPwd(){        //提交处理        if(Request::instance()->isPost()===true){            $data=$this->dataAction();            if($data['admin_password']!==$data['password2']){                ajaxReturn($this->errCode('validError'), '两次密码输入不一致');            }            $pwd=password_encrypt($data['admin_password'], config('salt_admin'));            $re=AdminUser::update(['id'=>$data['id'],'admin_password'=>$pwd]);;            if($re){                ajaxReturn($this->errCode('OK'), '更新成功');            }else{                $this->error($pmodel->getError());            }        }else{            $param=input('param.');            $ress=AdminUser::get($param['id']);            $data=[                'ress'=>$ress,            ];            $this->assign('data',$data);            return  $this->fetch();        }    }    /**      * 数据提交之前的操作     * @access public      * @since dxf      * @return [type]      */     protected function after_del($data){        $contents='删除了账号，账号名称：'.$data['admin_name'].'，真实名称：'.$data['real_name'];        $this->writeLog($contents);    }    /**     * 获取所有部门     * @throws \think\exception\DbException     */    public function make_over_school(){        $list = \app\backend\model\Campus::all();        $this->success('','',$list);    }    /**     * 获取所有部门     * @throws \think\exception\DbException     */    public function make_over_department(){        $school_id = $this->request->param('school_id');        $list = AdminDepartment::all(['campus_id'=>$school_id]);        $this->success('','',$list);    }    /**     * 可转移客户的业务员     * @throws \think\exception\DbException     */    public function make_over_admin(){        $ausess=$this->ausess();        $where = [            'status' => 1,            'id' => ['<>',$ausess['auid']]        ];        $department_id = $this->request->param('department_id');        if (!empty($department_id)){            $where['department_id'] = $department_id;        }        $list = AdminUser::all($where);        $this->success('','',$list);    }}