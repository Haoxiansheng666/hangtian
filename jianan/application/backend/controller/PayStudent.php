<?phpnamespace app\backend\controller;use app\backend\logic\CompanyLogic;use app\backend\logic\PayStudentLogic;use app\backend\model\Apply;use app\backend\model\AuthGroup;use app\backend\model\Cert;use app\backend\model\Company;use app\backend\model\CompanyCustomerBatch;use app\backend\model\ExamStudent;use app\backend\model\GradeStudent;use app\backend\model\InvoiceLog;use app\backend\model\PayLog;use app\backend\model\ProceedsType;use app\backend\model\Profession;use app\backend\model\ProfessionCate;use app\backend\model\Read;use app\backend\model\RefundLog;use app\backend\model\ServiceContact;use think\Db;use think\Config;use think\db\exception\DataNotFoundException;use think\db\exception\ModelNotFoundException;use think\Exception;use think\exception\DbException;use think\Log;use think\Request;use app\backend\model\CustomerCate;use app\backend\model\Customer;use app\backend\model\PayStudent as C;use app\backend\logic\CustomerLogic;use app\backend\model\AdminUser;use think\Url;class PayStudent  extends Common{       protected $tableName = 'customer_cate';    protected $tableName1 = 'pay_student';    public function __construct(Request $request = null)    {        parent::__construct($request);        $admin = $this->ausess();        $this->assign('admin_info',$admin);        $cate_list=CustomerCate::getAll(['status'=>1]);        $auth_sf = 0;        $group = AuthGroup::get($admin['group_id']);        if ($group['pid'] == 0 && $group['department_id'] == 0){            $aulist=AdminUser::all();            $auth_sf = 1;        }else if ($group['pid'] == 0 && $group['department_id'] == 7){            $aulist = AdminUser::all(['campus_id' => $admin['campus_id']]);            $auth_sf = 2;        }else{            $top_group = AuthGroup::get($group['pid']);            if ($top_group['pid'] == 0){                $aulist = AdminUser::all(['pid' => $admin['auid'],'campus_id' => $admin['campus_id']]);                $auth_sf = 3;            }else{                $aulist = [];                $auth_sf = 4;            }        }        $this->assign('cate_list',$cate_list);        $this->assign('aulist',$aulist);        // 工种分类        $pro_cate_list= ProfessionCate::all();        $this->assign('pro_cate_list',$pro_cate_list);        // 支付方式        $proceeds_type = ProceedsType::all();        $this->assign('proceeds_type',$proceeds_type);        // 状态        $status_list = (new C())->statusList();        $this->assign('status_list',$status_list);        $company = Company::all(['status'=>1]);        $this->assign('company',$company);    }    /** 学员列表 */    /**     * 客户列表     * @access public     * @return mixed [type] 页面     */    public function index(){        $model=new C;        $param=input('param.');        $param['limit'] = !empty($param['limit']) ? $param['limit'] : 10;        $where=CustomerLogic::selectParam($param,$this->ausess());        $rs=$model->get_join_list($param,$where);        foreach ($rs['list'] as $k => $v){            // 是否可领证标志            $rs['list'][$k]['lz'] = 1;        }        $this->assign([            'count' => $rs['count'],            'data' => $rs['list']        ]);        return  $this->fetch();    }    /**     * 客户列表数据的获取     * @access public     * @return void [json]     */    public function get_index_data(){        $model=new C;        $param=input('param.');        $where=PayStudentLogic::selectParam($param,$this->ausess());//        if (empty($where['status'])){//            $where['status'] = ['>',1];//        }        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $rs=$model->get_join_list($param,$where);        layuiReturn($this->errCode('OK'), '获取成功', $rs['count'], $rs['list']);    }    /**     * 客户详情     * @access public     * @return mixed [type] 页面     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession,professionTop')                ->where('id',$param['id'])                ->find();        }else{            $this->error('页面出错了！');        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,        ]);        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }        public function ajax_search(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param=input('param.');            //$ress= Customer::where('mobile',$param['mobile'])->find();            $ress= Customer::where('locate('.$param["mobile"].', mobile)')->find();            if (!empty($ress['profession_id'])){                $ress['profession_info'] = \app\backend\model\Profession::get($ress['profession_id']);                $ress['profession_top_info'] = \app\backend\model\Profession::get($ress['profession_info']['pid']);                $ress['profession_cate_info'] = ProfessionCate::get($ress['profession_info']['cate_id']);            }            if($ress['auid']){                $ress['auid_name'] = AdminUser::where('id',$ress['auid'])->value('real_name');            }            if($ress){                return ['code'=>1,'data'=>$ress];            }else{                return ['code'=>0];            }                    }    }         /**     * 客户详情     * @access public     * @return mixed [type] 页面     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function search(){        return  $this->fetch('index/search');    }    /**     * 客户详情     * @access public     * @return mixed [type] 页面     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function audit_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession,professionTop')                ->where('id',$param['id'])                ->find();            $ress['fields'] = \app\backend\model\ProfessionFields::where('id','in',$ress['profession_fields'])->column('title');        }else{            $this->error('页面出错了！');        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();//        var_dump($refund_log);die;        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,            'ware_id' => $param['ware_id']        ]);        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }/**     * 客户详情     * @access public     * @return mixed [type] 页面     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function qiye_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession,professionTop')                ->where('id',$param['id'])                ->find();            $ress['fields'] = \app\backend\model\ProfessionFields::where('id','in',$ress['profession_fields'])->column('title');        }else{            $this->error('页面出错了！');        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();//        var_dump($refund_log);die;        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,            'ware_id' => $param['ware_id']        ]);        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 客户数据下载     * @access public     * @return void [type]     */    public function down1(){        $model=new C;        $param=input('param.');        $where=PayStudentLogic::selectParam($param,$this->ausess());        $data=$model->get_down_list($param,$where);        $excel_name='学员信息_'.date('YmdHis');        PayStudentLogic::down($data,$excel_name);    }    public function down()    {        $param = $this->request->param();        $list_items = (new \app\backend\model\PayStudent())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $key=>$item){            $list_items[$key]['profession_top'] = Profession::where('id',$item['profession_top_id'])->value('name');            $list_items[$key]['profession'] = Profession::where('id',$item['profession_id'])->value('name');            $list_items[$key]['admin'] = AdminUser::where('id',$item['auid'])->value('real_name');            $list_items[$key]['company'] = \app\backend\model\Company::where('id',$item['company_id'])->value('company');        }        $excel_name='企业客户导出_'.date('YmdHis');        PayStudentLogic::download($list_items,$excel_name);    }    /**     * 客户数据导入的模板下载     * @access public     * @return void [type]     */    public function muban(){        $rr=PayStudentLogic::muban();        $excel_name='学员导入模板';        PayStudentLogic::down($rr,$excel_name,2,'1.客户类型：个人/企业  2.单位名称如果是企业的话 必填  3.工种：工种类型  4.类型：新办/复审 5.证书到期时间 没有不填写');    }    /**     * 客户数据导入     * @access public     * @return mixed [type]     * @throws DbException     */    public function leading(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param=input('param.');            $rss=PayStudentLogic::uploadFile($param['fileurl'],$this->campus_id,$param['customer_id']);            if($rss['status']==1){                $count_data = count($rss['data']);                if($count_data == 0){                    $this->error('你导入的人员和该企业业务员相符合数量为0');                }//                if (!empty($param['apply_num']) && $count_data != $param['apply_num']){//                    $this->error('输入报名人数与实际人数不符，实际人数:'.$count_data);//                }                /** 关联客户 */                $customer_id = '';$campus_id = '';                // 如果选定客户则保存                if (!empty($param['customer_id'])){                    $customer_id = $param['customer_id'];                    if (!empty($this->campus_id)){                        $campus_id = $this->campus_id;                    }else{                        $campus = \app\backend\model\Campus::all();                        $campus_id = array_column($campus,'id')[0];                    }                }else{                    $this->error('该企业不存在，请先添加企业');                }                /** 关联客户 end */                /** 批次号处理 */                // 自定义批次号可指定增加或替换默认批次号                if (!empty($param['batch_number'])){                    $batch_number = $param['batch_number'];                    $batch = CompanyCustomerBatch::get(['batch_number' => $batch_number]);                    // 批次号已存在则在原有基础上增加人数及价格                    if (!empty($batch)){                        $batch_data = [                            'apply_num' => Db::raw('apply_num+'.$count_data),                            'total_price' => Db::raw('total_price+'.$param['total_price']),                        ];                    }else{                        $batch_data = [                            'customer_id' => $customer_id,                            'campus_id' => $campus_id,                            'batch_number' => $batch_number,                            'apply_num' => $count_data,                            'total_price' => $param['total_price'],                        ];                    }                }else{                    $batch_number = date('YmdHis');                    $batch_data = [                        'customer_id' => $customer_id,                        'campus_id' => $campus_id,                        'batch_number' => $batch_number,                        'apply_num' => $count_data,                        'total_price' => $param['total_price'],                    ];                    $batch = new CompanyCustomerBatch();                }                $res1 = $batch->save($batch_data);                if ($res1 === false){                    $this->error('服务器错误,控制器:PayStudent,方法:leading');                }                /** 批次号处理 end */                foreach ($rss['data'] as $k => $v){                    //企业id                    $rss['data'][$k]['company_id'] = $customer_id;                    $rss['data'][$k]['batch_number'] = $batch_number;                }                foreach ($rss['data'] as $k=>$item){                    unset($item['id_card']);unset($item['recommend_job']);unset($item['batch_number']);unset($item['customer_id']);                    unset($item['education']);unset($item['account']);unset($item['password']);unset($item['total_price']);unset($item['expire']);                    $item['cate_id'] = \app\backend\model\Profession::where('id',$item['profession_id'])->value('cate_id');                    $item['from'] = 2;                    $model1 = new Customer();                    $customers_id = $model1->insertGetId($item);                    $rss['data'][$k]['customer_id'] = $customers_id;                    $rss['data'][$k]['pay_time'] = 0;                    $rss['data'][$k]['from'] = 2;                }                $model=new C;                $re=$model->saveAll($rss['data']);                if($re){                    $this->success('数据导入成功');                }else{                    $this->error('数据导入失败了');                }            }else{                ajaxReturn($this->errCode('SQLError'), $rss['msg']);            }        }else{            //$company_customer = \app\backend\model\Customer::all(['from' => 2]);            $company_customer = \app\backend\model\Company::all(['status' => 1]);            $this->assign([                'company_customer' => $company_customer            ]);            return  $this->fetch();        }    }    /** 学员列表 end */    /** 已报名客户列表 */    /**     * 已报名客户列表     * @access public     * @return mixed [type] 页面     * @since dxf     */    public function customer_index(){        return  $this->fetch();    }    /**     * 获取客户列表数据     */    public function get_customer_index_data(){        $model=new C;        $param=input('param.');        $where=PayStudentLogic::selectParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $rs=$model->get_join_list($param,$where);        layuiReturn($this->errCode('OK'), '获取成功', $rs['count'], $rs['list']);    }    /**     * 提交缴费申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function pay_money()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $pay_log = PayLog::where([''=>$param['pay_student_id'],'type'=>1])->where('status','in',[0,1])->find();            $res = false;            if(!$pay_log){                // 增加缴费记录                $res = (new PayLog())->allowField(true)->save($param);            }            $pay_student = \app\backend\model\PayStudent::get($param['pay_student_id']);            if($pay_student['status'] == -3){                $pay_student->save(['status'=>1]);            }            if ($res){                $this->success('缴费审核已提交');                $read = new Read();                $read->save(['type'=>'8','title'=>'缴费待审核','content'=>'您好，有新的客户缴费需要审核，请尽快审核','create_time'=>time(),'url'=>'']);            }            $this->error('提交失败');        }else {            $id = $this->request->param('id');            $customer = (new C())->with('admin')->where('id', $id)->find();            $customer['customer_id'] = $customer['id'];            $customer['pid'] = 0;            unset($customer['id']);            $profession = \app\backend\model\Profession::get($customer['profession_id']);            $profession_top = \app\backend\model\Profession::get($profession['pid']);            $customer['profession_name'] = $profession_top['name'] . '-' . $profession['name'];            $admin = AdminUser::all();            $this->assign([                'admin' => $admin,                'data' => $customer,                'profession' => $profession            ]);            return $this->fetch();        }    }    /**     * 提交退费申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function refund(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $ids = explode(',',$param['id']);            $param['pay_proof'] = $param['refund_proof'];$param['remark'] = $param['mark'];            unset($param['id']); $res = false;            if(count($ids) > 1){                $param['batch_number'] = date('YmdHis');                $param['company_id'] = C::where('id','in',$ids)->value('company_id');                $param['from'] = 2;                // 增加发票记录                foreach ($ids as $val){                    $param['pay_student_id'] = $val;                    $log = RefundLog::where(['pay_student_id'=>$val])->find();                    if($log){//                        if(in_array($log['status'],[2,4,6])){                        if($log['status'] == 2){                            $param['status'] = 0;                        }else if($log['status'] == 1){                            continue;                        }                    }else{                        $log = new RefundLog();                    }                    $res = $log->allowField(true)->save($param);                }            }else{                $pay_student = \app\backend\model\PayStudent::get($param['pay_student_id']);                if($pay_student['from'] == 2){                    $param['batch_number'] = date('YmdHis');                    $param['company_id'] = $pay_student['company_id'];                    $param['from'] = 2;                }                $log = RefundLog::where(['pay_student_id'=>$param['pay_student_id']])->find();                //不存在                if($log){                    //if(in_array($log['status'],[2,4,6])){                    if($log['status'] == 2){                        $param['status'] = 0;                    }                }else{                    $log = new RefundLog();                }                $res = false;                //存在  并且 被拒绝 或者 不存在                if((isset($log) && $log['status'] == 2 ) || !$log){                    $res = $log->allowField(true)->save($param);                }            }            $read = new Read();            $read->save(['type'=>'9','title'=>'退费待审核','content'=>'您好，您有新的退费审核提交，请尽快审核','create_time'=>time(),'url'=>'']);            if ($res){                $this->success('退费审核已提交');            }            $this->error('提交失败');        }else {            $id = $this->request->param('id');            $ids = explode(',',$id);            if(count($ids) > 1){                $data['id'] = $id;                $this->assign('data',$data);            }else{                $customer = (new C())->with('admin')->where('id', $id)->find();                $customer['customer_id'] = $customer['id'];                $customer['pid'] = 0;                unset($customer['id']);                $profession = \app\backend\model\Profession::get($customer['profession_id']);                $profession_top = \app\backend\model\Profession::get($customer['profession_top_id']);                $admin = AdminUser::all();                $this->assign([                    'admin' => $admin,                    'data' => $customer,                    'profession' => $profession,                    'profession_top' => $profession_top                ]);            }            return $this->fetch();        }    }    /**     * 提交发票申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function invoice(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $ids = explode(',',$param['id']);            unset($param['id']);  $res = false;            if(count($ids) > 1){                $param['batch_number'] = date('YmdHis');                $param['company_id'] = C::where('id','in',$ids)->value('company_id');                $param['from'] = 2;                foreach ($ids as $val){                    $log = InvoiceLog::where('pay_student_id',$val)->find();                    if($log){                        if($log['status'] == 2){                            $param['status'] = 0;                        }elseif ($log['status'] == 1){                            continue;                        }                    }else{                        $log = new InvoiceLog();                    }                    $param['pay_student_id'] = $val;                    $res = $log->allowField(true)->save($param);                }            }else{                $log = InvoiceLog::where('pay_student_id',$param['id'])->find();                //不存在                if($log){                    if($log['status'] == 2){                        $param['status'] = 0;                    }                }else{                    $log = new InvoiceLog();                }                $res = false;                if((isset($log) && $log['status'] == 2 ) || !$log){                    $res = $log->allowField(true)->save($param);                }            }            // 增加发票记录            if ($res){                $read = new Read();                $read->save(['type'=>'10','title'=>'发票待开','content'=>'您好，您有新的申请发票待审核，请尽快处理','create_time'=>time(),'url'=>'']);                $this->success('发票审核已提交');            }            $this->error('提交失败');        }else {            $id = $this->request->param('id');            $ids = explode(',',$id);            if(count($ids) > 1){                $data['id'] = $id;                $this->assign('data',$data);            }else {                $customer = (new C())->with('admin')->where('id', $id)->find();                $customer['customer_id'] = $customer['id'];                $customer['pid'] = 0;                unset($customer['id']);                $profession = \app\backend\model\Profession::get($customer['profession_id']);                $profession_top = \app\backend\model\Profession::get($customer['profession_top_id']);                $admin = AdminUser::all();                $this->assign([                    'admin' => $admin,                    'data' => $customer,                    'profession' => $profession_top['name'] . '--' . $profession['name']                ]);            }            return $this->fetch();        }    }    /**     * 提交领证申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function get_certificate(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_student = C::get($param['pay_student_id']);            // 增加校区字段            if (!empty($pay_student['campus_id'])){                $param['campus_id'] = $pay_student['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $cert = Cert::get([                'pay_student_id' => $param['pay_student_id'],            ]);            if (!empty($cert)){                $param['id'] = $cert['id'];            }else{                $cert = new Cert();            }            $param['address'] = $param['type'] == 1 ? "" : $param['address'];            // 增加领证记录            $param['status'] = 0;            $res = $cert->allowField(true)->save($param);            if ($res){                $this->success('领证申请已提交');            }            $this->error('提交失败');        }else {            $id = $this->request->param('id');            $customer = (new C())->with('admin')->where('id', $id)->find();            $customer['customer_id'] = $customer['id'];            $customer['pid'] = 0;            unset($customer['id']);            $profession = \app\backend\model\Profession::get($customer['profession_id']);            $cert = Cert::get([                'pay_student_id' => $id            ]);            $this->assign([                'data' => $customer,                'profession' => $profession,                'cert' => $cert            ]);            return $this->fetch();        }    }    /**     * 提交领证申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function getCertificate()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_student = C::where('id','in',$param['id'])->select();            unset($param['id']);            // 增加校区字段            if (!empty($pay_student[0]['campus_id'])){                $param['campus_id'] = $pay_student[0]['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $batch_number = date('YmdHis');            foreach ($pay_student as $val){                $cert = Cert::get(['pay_student_id' => $val['id']]);                if (!empty($cert['id'])){                    $param['id'] = $cert['id'];                }else{                    $cert = new Cert();                }                $param['pay_student_id'] = $val['id'];                $param['address'] = $param['type'] == 1 ? "" : $param['address'];                // 增加领证记录                $param['status'] = 0;                $param['batch_number'] = $batch_number;                $param['company_id'] = $val['company_id'];                $param['from'] = $val['from'];               $cert->allowField(true)->save($param);            }            $read = new Read();            $read->save(['type'=>'11','title'=>'领证待审核','content'=>'您好，您有新的领证申请待审核，请尽快处理','create_time'=>time(),'url'=>'']);            $this->success('领证申请已提交');        }else {            $id = $this->request->param('id');            $company_id = \app\backend\model\PayStudent::where('id','in',$id)->value('company_id');            $this->assign('id',$id);            $this->assign('company_id',$company_id);            return $this->fetch('pay_student/get_cert');        }    }    /**     * 提交领证申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function get_certificate_s()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_student = C::get($param['pay_student_id']);            // 增加校区字段            if (!empty($pay_student['campus_id'])){                $param['campus_id'] = $pay_student['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $cert = Cert::get([                'pay_student_id' => $param['pay_student_id'],            ]);            if (!empty($cert)){                $param['id'] = $cert['id'];            }else{                $cert = new Cert();            }            $param['address'] = $param['type'] == 1 ? "" : $param['address'];            // 增加领证记录            $param['status'] = 0;            $param['from'] = $pay_student['from'];            $res = $cert->allowField(true)->save($param);            if ($res){                $read = new Read();                $read->save(['type'=>'11','title'=>'领证待审核','content'=>'您好，您有新的领证申请待审核，请尽快处理','create_time'=>time(),'url'=>'']);                $this->success('领证申请已提交');            }            $this->error('提交失败');        }else {            $id = $this->request->param('id');            $customer = (new C())->with('admin')->where('id', $id)->find();            $customer['customer_id'] = $customer['id'];            $customer['pid'] = 0;            unset($customer['id']);            $profession = \app\backend\model\Profession::get($customer['profession_id']);            $cert = Cert::get([                'pay_student_id' => $id            ]);            $this->assign([                'data' => $customer,                'profession' => $profession,                'cert' => $cert            ]);            return $this->fetch();        }    }    /**     * 提交缴费申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function supplementary()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            // 增加缴费记录            $res = (new PayLog())->allowField(true)->save($param);            \app\backend\model\PayStudent::where('id',$param['pay_student_id'])->update(['status'=>4]);            if ($res){                $read = new Read();                $read->save(['type'=>'8','title'=>'缴费待审核','content'=>'您好，您有新的客户缴费申请待审核，请尽快处理','create_time'=>time(),'url'=>'']);                $this->success('缴费审核已提交');            }            $this->error('提交失败');        }else {            $id = $this->request->param('id');            $customer = (new C())->with('admin')->where('id', $id)->find();            $customer['customer_id'] = $customer['id'];            $customer['pid'] = 0;            unset($customer['id']);            $profession = \app\backend\model\Profession::get($customer['profession_id']);            $profession_top = \app\backend\model\Profession::get($profession['pid']);            $admin = AdminUser::all();            $this->assign([                'admin' => $admin,                'data' => $customer,                'profession' => $profession,                'profession_top' => $profession_top            ]);            return $this->fetch();        }    }    /**     * 提交缴费申请     * @return mixed|void     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function reload_pay()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $param['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $param['campus_id'] = array_column($campus,'id')[0];            }            $student = C::get($param['id']);            $profession = (new \app\backend\model\Profession())                ->where('id',$param['profession_id'])                ->find();            if (empty($profession)){                $this->error('请选择工种类型');            }            if ($profession['name'] == '复审'){                $param['user_type'] = 2;            }else{                $param['user_type'] = 1;            }            $param['status'] = 1;            // 修改学员状态为待财务审核            $student->save($param);            $this->success('重新提交审核成功');        }else {            $id = $this->request->param('id');            $customer = C::get($id);            if (!empty($customer['id'])){                $customer['pid'] = 0;                // 查询学员工种上级栏目ID                $profession = \app\backend\model\Profession::get($customer['profession_id']);                $cate_id = ProfessionCate::get($profession['cate_id']);                $customer['cate_id'] = $cate_id['id'];                $customer['pid'] = $profession['pid'];                $customer['profession_fields_array'] = explode(',',$customer['profession_fields']);                $customer['profession_fields_array'] = json_encode($customer['profession_fields_array']);            }            $admin = AdminUser::all();            $this->assign([                'admin' => $admin,                'data' => $customer            ]);            return $this->fetch();        }    }    /**     * 已报名客户     * @access public     * @return mixed [type] 页面     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function customer_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession')                ->where('id',$param['id'])                ->find();        }else{            $this->error('页面出错了！');        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $contact_log = (new ServiceContact())            ->with('grade,exam,admin')            ->where('pay_student_id',$ress['id'])            ->select();        //领证记录        $cert_log = Cert::where(['pay_student_id'=>$ress['id']])->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,            'contact_log' => $contact_log,            'exam_log' => $cert_log,        ]);        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 已报名客户     * @access public     * @return mixed [type] 页面     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function student_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new C())                ->with('profession')                ->where('id',$param['id'])                ->find();        }else{            $this->error('页面出错了！');        }        // 缴费记录        $pay_log = (new PayLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 培训记录        $grade_student = (new GradeStudent())            ->with('grade,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 考试记录        $exam_student = (new ExamStudent())            ->with('exam,payStudent')            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 退费记录        $refund_log = (new RefundLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        // 发票记录        $invoice_log = (new InvoiceLog())            ->where([                'pay_student_id' => $ress['id']            ])            ->select();        $contact_log = (new ServiceContact())            ->with('grade,exam,admin')            ->where('pay_student_id',$ress['id'])            ->select();        $this->assign([            'pay_log' => $pay_log,            'grade_student' => $grade_student,            'exam_student' => $exam_student,            'refund_log' => $refund_log,            'invoice_log' => $invoice_log,            'contact_log' => $contact_log,        ]);        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /** 已报名客户列表 end */    /** 报名审核列表  */    /**     * 报名审核列表     * @access public     * @return mixed [type] 页面     * @since dxf     */    public function index_audit(){        $this->assign([            'ware_id' => $this->request->param('ware_id','1')        ]);        return  $this->fetch();    }         /** 报名审核列表  */    /**     * 报名审核列表     * @access public     * @return mixed [type] 页面     * @since dxf     */    public function qiye_audit(){        $this->assign([            'ware_id' => $this->request->param('ware_id','1')        ]);        return  $this->fetch();    }    /**     * 报名资料审核数据的获取     * @access public     * @return void [json]     */    public function get_index_audit_data(){        $model=new C;        $param=input('param.');        $param['fa'] = true;        $where=CustomerLogic::selectParam($param,$this->ausess());        if (empty($where['status'])){            $where['status'] = ['in','1,11'];        }        $rs=$model->get_join_list($param,$where);        layuiReturn($this->errCode('OK'), '获取成功', $rs['count'],$rs['list']);    }    /**     * 审核通过     * @throws DbException     */    public function consent(){        $id = $this->request->param('id');        $student = C::get($id);        if (empty($student)){            $this->error('服务器错误');        }        $company = Company::get($student['company_id']);        if(!isset($company) || (isset($company) && $company['is_free'] == 0)){            // 修改报名客户信息            $student->status = 11;            $student->check_time = time();            // 增加财务支付记录            $pay_log_data = [                'pay_student_id' => $student['id'],                'pay_price' => $student['pay_price'] ? $student['pay_price'] : 0,                'pay_way' => $student['pay_way'] ?? 1,                'pay_site' => $student['pay_site'] ?? 1,                'proceeds_type' => $student['proceeds_type'] ?? "微信支付",                'pay_proof' => $student['pay_proof'],                'remark' => $student['remark'],                'pay_time' => $student['pay_time'],                'from'=>$student['from']            ];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $pay_log_data['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $pay_log_data['campus_id'] = array_column($campus,'id')[0];            }            $student->save();            (new PayLog())->save($pay_log_data);            $read = new Read();            if($student['company_id'] != 0 && empty($student['pay_proof'])){                $read->save(['type'=>'8','title'=>'企业财务审核','content'=>'您好，有企业客户缴费需要审核，请进快处理','create_time'=>time(),'url'=>'backend/Financing/company']);                $this->success('请前往企业端上传缴费凭证',url('PayStudent/qiye_audit'));            }else{                //$this->success('已提交财务审核',request()->domain().url('PayStudent/index_audit'));                $read->save(['type'=>'8','title'=>'个人财务审核','content'=>'您好，有个人客户需要审核','create_time'=>time(),'url'=>'backend/Financing/audit_index']);                $this->success('已提交财务审核',url('PayStudent/index_audit'));            }        }else{            $student->status = 2;            $student->check_time = time();            $student->save();            $read = new Read();            $read->save(['user_id'=>$student['auid'],'type'=>'1','title'=>'待培训通知','content'=>'您好，您有企业用户待培训，请尽快处理','create_time'=>time(),'url'=>'backend/Grade/ol_index']);            $this->success('请联系教务开始培训',url('PayStudent/index_audit'));        }    }    /**     * 审核拒绝     * @return mixed     * @throws DbException     */    public function refuse(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            if (empty($param['id'])){                $this->error('服务器错误');            }            // 修改学员信息            $student = C::get($param['id']);            $res = $student->allowField(true)->save($param);            if ($res){                //资料审核拒绝  通知业务员                $read = new Read();                $read->save(['user_id'=>$student['auid'],'type'=>'14','title'=>'资料审核拒绝','content'=>'您好，您的客户资料审核不通过，请尽快处理','create_time'=>time(),'url'=>'backend/Customer/index']);                $this->success('此学员审核已被驳回',request()->domain().url('pay_student/index_audit'));            }            $this->error('提交失败');        }        $this->assign([            'id' => $this->request->param('id')        ]);        return $this->fetch();    }         /**     * 审核通过     * @throws DbException     */    public function qiye_consent()    {        $id = $this->request->param('id');        $student = C::get($id);        if (empty($student)){            $this->error('服务器错误');        }        // 修改报名客户信息        $student->status = 11;        $student->check_time = time();        // 增加财务支付记录        $pay_log_data = [            'pay_student_id' => $student['id'],            'pay_price' => $student['pay_price'],            'pay_way' => $student['pay_way'],            'pay_site' => $student['pay_site'],            'proceeds_type' => $student['proceeds_type'],            'pay_proof' => $student['pay_proof'],            'remark' => $student['remark'],            'pay_time' => !is_numeric($student['pay_time']) ? strtotime($student['pay_time']) : $student['pay_time'],        ];        // 增加校区字段        if (!empty($this->ausess()['campus_id'])){            $pay_log_data['campus_id'] = $this->ausess()['campus_id'];        }else{            $campus = \app\backend\model\Campus::all();            $pay_log_data['campus_id'] = array_column($campus,'id')[0];        }        (new PayLog())->save($pay_log_data);        $student->save();        //        $read = new Read();        $read->save(['type'=>8,'title'=>'缴费待审核','content'=>'您好，有新的客户缴费待审核，请尽快处理','create_time'=>time(),'url'=>'']);        $this->success('已提交财务审核');    }    /**     * 审核拒绝     * @return mixed     * @throws DbException     */    public function qiye_refuse()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            if (empty($param['id'])){                $this->error('服务器错误');            }            // 修改学员信息            $student = C::get($param['id']);            $res = $student->allowField(true)->save($param);            if ($res){                $read = new Read();                $read->save(['user_id'=>$student['auid'],'type'=>'15','title'=>'缴费拒绝','content'=>'您好，您的客户缴费被财务审核拒绝，请尽快处理','create_time'=>time(),'url'=>'']);                $this->success('此学员审核已被驳回');            }            $this->error('提交失败');        }        $this->assign([            'id' => $this->request->param('id')        ]);        return $this->fetch();    }    /** 报名审核列表 end */    /**     * 客户数据的删除     * @access public     * @return void [json]     */    public function delete(){      if(var_export(Request::instance()->isAjax(), true)==='true'){          $ress=$this->del($this->tableName1);          return $ress;       }    }    /**     * 客户添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function add(){      if(var_export(Request::instance()->isAjax(), true)==='true'){          $data = $this->request->param();          //用户信息不存在          if(!$data['customer_id']){              //根据手机号查该用户              //$data['customer_id'] = Customer::where('mobile = '.$data['mobile'].' or mobile1 = '.$data['mobile'].' or mobile2 = '.$data['mobile'])->value('id');              $data['customer_id'] = Customer::where('mobile',$data['mobile'])->whereOr('mobile1',$data['mobile'])->whereOr('mobile2',$data['mobile'])->value('id');              //还查不到的话  就插入意向客户              if(!$data['customer_id']){                    $add = ['mobile'=>$data['mobile'],'name'=>$data['name'],'profession_top_id'=>$data['profession_top_id'],'profession_id'=>$data['profession_id'],                        'auid'=>$data['auid'],'create_time'=>time()];                    $customer = new Customer();                    $customer->save($add);                    $data['customer_id'] = $customer->id;              }          }          if(C::where(['customer_id'=>$data['customer_id'],'profession_id'=>$data['profession_id']])->find()){              $this->error('您已经报名该工种');          }          $model=new C;          $this->addAction($model);          //个人报名资料审核          $read = new Read();          $read->save(['type'=>'6','title'=>'个人报名资料审核','content'=>'您好，有个人客户报名，请及时审核','create_time'=>time(),'url'=>'backend/PayStudent/index_audit']);      }else{          $id = $this->request->param('id');          $customer = C::get($id);          if (!empty($customer['id'])){              $customer['pid'] = 0;              // 查询学员工种上级栏目ID              $profession = \app\backend\model\Profession::get($customer['profession_id']);              $cate_id = ProfessionCate::get($profession['cate_id']);              $customer['cate_id'] = $cate_id['id'];              $customer['pid'] = $profession['pid'];              $customer['profession_fields_array'] = explode(',',$customer['profession_fields']);              $customer['profession_fields_array'] = json_encode($customer['profession_fields_array']);          }          $admin = AdminUser::all();          $this->assign([              'admin' => $admin,              'data' => $customer          ]);          return $this->fetch();      }    }    /**     * 客户添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function edit(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model=new C;            $this->addAction($model);        }else{            $id = $this->request->param('id');            $customer = C::get($id);            if (!empty($customer['id'])){                $customer['pid'] = 0;                // 查询学员工种上级栏目ID                $profession = \app\backend\model\Profession::get($customer['profession_id']);                $cate_id = ProfessionCate::get($profession['cate_id']);                $customer['cate_id'] = $cate_id['id'];                $customer['pid'] = $profession['pid'];                $customer['profession_fields_array'] = explode(',',$customer['profession_fields']);                $customer['profession_fields_array'] = json_encode($customer['profession_fields_array']);            }            $admin = AdminUser::all();            $this->assign([                'admin' => $admin,                'data' => $customer            ]);            return $this->fetch();        }    }    /**     * 客户添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function audit_edit(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model=new C;            $this->addAction($model);        }else{            $id = $this->request->param('id');            $customer = C::get($id);            if (!empty($customer['id'])){                $customer['pid'] = 0;                // 查询学员工种上级栏目ID                $profession = \app\backend\model\Profession::get($customer['profession_id']);                $cate_id = ProfessionCate::get($profession['cate_id']);                $customer['cate_id'] = $cate_id['id'];                $customer['pid'] = $profession['pid'];                $customer['profession_fields_array'] = explode(',',$customer['profession_fields']);                $customer['profession_fields_array'] = json_encode($customer['profession_fields_array']);            }            $admin = AdminUser::all();            $this->assign([                'admin' => $admin,                'data' => $customer            ]);            return $this->fetch();        }    }     /**     * 客户添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function qiye_edit(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model=new C;            $this->addAction($model);        }else{            $id = $this->request->param('id');            $customer = C::get($id);            if (!empty($customer['id'])){                $customer['pid'] = 0;                // 查询学员工种上级栏目ID                $profession = \app\backend\model\Profession::get($customer['profession_id']);                $cate_id = ProfessionCate::get($profession['cate_id']);                $customer['cate_id'] = $cate_id['id'];                $customer['pid'] = $profession['pid'];                $customer['profession_fields_array'] = explode(',',$customer['profession_fields']);                $customer['profession_fields_array'] = json_encode($customer['profession_fields_array']);            }            $admin = AdminUser::all();            $this->assign([                'admin' => $admin,                'data' => $customer            ]);            return $this->fetch();        }    }            /**     * 客户添加和修改     * @access public     * @return mixed|void     * @throws DbException     */    public function repetition(){      if(var_export(Request::instance()->isAjax(), true)==='true'){          $param = $this->request->param();          // 增加校区字段          if (!empty($this->ausess()['campus_id'])){              $param['campus_id'] = $this->ausess()['campus_id'];          }else{              $campus = \app\backend\model\Campus::all();              $param['campus_id'] = array_column($campus,'id')[0];          }          $student = C::get($param['id']);          $profession = (new \app\backend\model\Profession())              ->where('id',$param['profession_id'])              ->find();          if (empty($profession)){              $this->error('请选择工种类型');          }          if ($profession['name'] == '复审'){              $param['user_type'] = 2;          }else{              $param['user_type'] = 1;          }          $param['status'] = 1;          $param['profession_top_id'] = $param['pid'];          // 修改学员状态为待财务审核          unset($param['cate_id']);unset($param['pid']);          $student->save($param);          $this->success('重新提交审核成功');      }else{          $id = $this->request->param('id');          $customer = C::get($id);          if (!empty($customer['id'])){              $customer['pid'] = 0;              // 查询学员工种上级栏目ID              $profession = \app\backend\model\Profession::get($customer['profession_id']);              $cate_id = ProfessionCate::get($profession['cate_id']);              $customer['cate_id'] = $cate_id['id'];              $customer['pid'] = $profession['pid'];              $customer['profession_fields_array'] = explode(',',$customer['profession_fields']);              $customer['profession_fields_array'] = json_encode($customer['profession_fields_array']);          }          $admin = AdminUser::all();          $this->assign([              'admin' => $admin,              'data' => $customer          ]);          return $this->fetch();      }    }    /**     * 可考试操作     * @throws DbException     */    public function success_exam()    {        $id = $this->request->param('id');        $pay_student = C::get($id);        $pay_student->save([            'exam_status' => 1,            'status'=>4        ]);        $read = new Read();        $read->save(['user_id'=>$pay_student['auid'],'type'=>'2','title'=>'待考试通知','content'=>'您好，您的客户待考试，请及时联系客户','create_time'=>time(),'url'=>'']);        $this->success('学员可考试状态已修改');    }    /**     * @throws DbException     */    public function error_exam(){        $id = $this->request->param('id');        $pay_student = C::get($id);        $pay_student->save([            'exam_status' => 0        ]);        $this->success('学员可考试状态已修改');    }    /**     * 数据提交之前的操作     * @access public     * @param array $data 接收的数据     * @return array [array]     * @throws DbException     */    protected function before_add($data){        if (!empty($data['id'])){            $student = C::get($data['id']);            if ($student['status'] == '-3'){                $data['status'] = 1;            }        }        foreach ($data as $k => $v){            if (strpos($k,'_time') != false && strpos($v,'-') && $k != 'pay_time'){                $data[$k] = strtotime($v);            }        }        $profession = (new \app\backend\model\Profession())            ->where('id',$data['profession_id'])            ->find();        if (empty($profession)){            $this->error('请选择工种类型');        }        if ($profession['name'] == '复审'){            $data['user_type'] = 2;        }else{            $data['user_type'] = 1;        }        if (!empty($data['from']) && $data['from'] == 2 && empty($data['company'])){            $this->error('请输入单位名称');        }        // 增加校区字段        if (!empty($this->ausess()['campus_id'])){            $data['campus_id'] = $this->ausess()['campus_id'];        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $data['campus_id'] = array_column($campus,'id')[0];        }      return $data;    }    /**     * 数据提交之后的操作     * @access public     * @param array $data 接收的数据     * @return void     */    protected function after_add($data){        // 判断信息是否存在意向客户表，若无意向客户则添加    }    /**     * 数据提交之后写入数据库     * @access public     * @param array $data 接收的数据     * @return void     */    protected function write_log($data){      if(!empty($data['customer_id'])){        $contents="添加回访数据！";      }elseif(!empty($data['cate_id'])){        $contents="添加 / 修改了客户数据，名称：$data[name]";      }else{        $contents="添加 / 修改了客户分类/来源数据，名称：$data[name]";      }      $this->writelog($contents);          }    /**     * 数据删除之后的操作     * @access public     * @param array $data 数据     * @return void     */    protected function after_del($data){      if(!empty($data['cate_id'])){         $contents="删除了客户数据，名称：$data[name]";      }else{         $contents="删除了客户分类/来源数据：$data[name]";      }      $this->writelog($contents);    }    /**     * @return mixed     */    public function qiye_index()    {        return $this->fetch('company');    }    /**     * 申请先培训考试   在缴费     */    public function apply()    {        if(var_export(Request::instance()->isAjax(), true)==='true') {            $ids = $this->request->param('ids');            $com_pay = PayLog::where('company_id', $ids)->column('pay_price');//            if (array_sum($com_pay) != 0) {//                $this->error('该企业不可申请');//            }            $apply = Apply::where(['company_id'=>$ids])->where('status','in',[0,1])->find();            if($apply){                $this->error('该企业已审核过，或者审核中');            }            $apply = new Apply();            $apply->save(['company_id'=>$ids,'auid'=>$this->ausess()['auid'],'create_time'=>time()]);            //Company::where('id', 'in', $ids)->update(['is_free' => 1]);            $this->success("申请成功");        }    }    /**     * 取消特权     */    public function cancel()    {        $ids = $this->request->param('ids');        Company::where('id', 'in', $ids)->update(['is_free' => 0]);        $this->success("取消成功");    }    /**     * 企业客户成员页面     * @return mixed     */    public function student(){        $company_id = input('id');        $batch_number = CompanyCustomerBatch::where('customer_id',$company_id)->column('batch_number');        $total_price = \app\backend\model\PayStudent::where('company_id',$company_id)->sum('total_price');        $pay_price_arr = PayLog::where('company_id',$company_id)->group('batch_number')->column('pay_price');        $pay_price = array_sum($pay_price_arr);        $this->assign('total_price',$total_price);        $this->assign('pay_price',$pay_price);        $this->assign('batch_number',$batch_number);        $this->assign('company_id',$company_id);        return $this->fetch('qiye_index');    }    /**     * 企业按批次缴费     * @return mixed     * @throws DbException     */    public function qiye_money()    {        $param=input('param.');        if(var_export(Request::instance()->isAjax(), true)==='true'){            if (empty($param['batch_number'])){                $this->error('批次号不能为空');            }            $pay_log_data = [                'batch_number' => $param['batch_number'],                'pay_price' => $param['pay_price'],                'pay_way' => $param['pay_way'],                'pay_site' => $param['pay_site'],                'proceeds_type' => $param['proceeds_type'],                'pay_proof' => $param['pay_proof'],                'remark' => $param['mark'],                'pay_time' => $param['pay_time'],                'create_time' => time(),                'company_id'=>CompanyCustomerBatch::where('batch_number',$param['batch_number'])->value('customer_id')            ];            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $pay_log_data['campus_id'] = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $pay_log_data['campus_id'] = array_column($campus,'id')[0];            }            (new PayLog())->save($pay_log_data);            //企业缴费批量  待审核            $read = new Read();            $read->save(['type'=>'8','title'=>'缴费待审核','content'=>'您好，有企业客户缴费待审核，请尽快处理','create_time'=>time(),'url'=>'']);            $this->success('已提交财务审核');        }        if(isset($param['id']) && !empty($param['id'])){            $ress= \app\backend\model\Customer::get($param['id']);            $batch_number = CompanyCustomerBatch::all([                'customer_id' => $param['id']            ]);        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress,'param'=>$param];        $this->assign([            'batch_number' => $batch_number        ]);        $this->assign('data',$data);        return $this->fetch('customer/qiye_money');    }    /**     * 企业选择 人数缴费     * @return mixed     * @throws DbException     */    public function some_money()    {        $param=input('param.');        if(var_export(Request::instance()->isAjax(), true)==='true'){            $student = \app\backend\model\PayStudent::where('id','in',$param['id'])->where('status','<>',11)->select();            // 增加校区字段            if (!empty($this->ausess()['campus_id'])){                $campus_id = $this->ausess()['campus_id'];            }else{                $campus = \app\backend\model\Campus::all();                $campus_id = array_column($campus,'id')[0];            }            $pay_log_data = [];$data = [];            foreach ($student as $item){                $log_data = [                    'pay_price' => $param['pay_price'],                    'pay_way' => $param['pay_way'],                    'pay_site' => $param['pay_site'],                    'proceeds_type' => $param['proceeds_type'],                    'pay_proof' => $param['pay_proof'],                    'remark' => $param['mark'],                    'create_time' => time(),                    'campus_id' => $campus_id,                    'from'=>2,                    'batch_number'=>date('YmdHis'),                    'company_id'=>$item['company_id'],                    'pay_time' => $param['pay_time'],                ];                $log_data['pay_student_id'] = $item['id'];                //不重复添加                if(!PayLog::where(['pay_student_id'=>$item['id'],'type'=>1])->where('status','in',[0,1])->find()){                    array_push($pay_log_data,$log_data);                }                if($item['status'] == 1){                    \app\backend\model\PayStudent::where('id',$item['id'])->update(['status'=>1]);                    array_push($data,['status'=>1]);                }else{                    \app\backend\model\PayStudent::where('id',$item['id'])->update(['status'=>11]);                    array_push($data,['status'=>11]);                }            }            (new PayLog())->saveAll($pay_log_data);            //$student->saveAll($data);            //\app\backend\model\PayStudent::where('id','in',$param['id'])->where('status','<>',11)->update(['status'=>11]);            //批量部分用户缴费待审核            $read = new Read();            $read->save(['type'=>'8','title'=>'缴费待审核','content'=>'您好，有企业客户缴费待审核，请尽快处理','create_time'=>time(),'url'=>'']);            $this->success('已提交财务审核');        }        if(isset($param['id']) && !empty($param['id'])){            $ress = $param['id'];        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress,'param'=>$param];        $this->assign('data',$data);        return $this->fetch('customer/some_money');    }    /**     * @throws DbException     */    public function getCompany(){        $company = new Company();        $param = input('param.');        $where = CompanyLogic::selectParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }        $res = $company->get_join_list($param,$where);        layuiReturn($this->errCode('OK'), '获取成功', $res['count'], $res['list']);    }    /**     * @return mixed     * @throws DbException     */    public function company_detail()    {        $id = $this->request->param('id');        $company = Company::get($id);        $this->assign('company',$company);        return $this->fetch();    }    /**     * 添加编辑企业信息     * @return mixed     * @throws DbException     */    public function company_edit()    {        //获取企业id        $id = $this->request->param('id');        $company = Company::get($id);        //添加或者编辑操作        if(var_export(Request::instance()->isAjax(), true)==='true'){            $model = new Company();            $data = $this->request->param();            if(empty($data['id'])){                if($model->allowField(true)->save($data)) {                    $this->writelog('添加企业信息');                    $this->success('信息修改成功');                }else{                    ajaxReturn($this->errCode('SQLError'), $model->getError());                }            }else{                if($model->allowField(true)->save($data,['id' =>$data['id']]) !== false){                    $this->writelog('编辑企业信息');                    $this->success('信息修改成功');                }else{                    ajaxReturn($this->errCode('SQLError'), $model->getError());                }            }        }        $this->assign('company',$company);        return $this->fetch('customer/company_add');    }    /**     * 删除企业信息     */    public function company_delete(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $id = $this->request->param('id');            Company::where('id',$id)->delete();            $this->success('删除成功');        }    }}