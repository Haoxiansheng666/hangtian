<?phpnamespace app\backend\controller;use app\backend\logic\FinancingLogic;use app\backend\logic\GradeLogic;use app\backend\logic\InvoiceLogic;use app\backend\logic\ProfessionLogic;use app\backend\model\AdminDeduct;use app\backend\model\AdminUser;use app\backend\model\Apply;use app\backend\model\Company;use app\backend\model\CompanyCustomerBatch;use app\backend\model\LabourCompanyRefund;use app\backend\model\LabourCompanyReturned;use app\backend\model\InvoiceLog;use app\backend\model\Occupation;use app\backend\model\OccupationStudent;use app\backend\model\OccuProfession;use app\backend\model\OccuRecord;use app\backend\model\PayLog;use app\backend\model\ProceedsType;use app\backend\model\Read;use app\backend\model\RefundLog;use think\App;use think\db\exception\DataNotFoundException;use think\db\exception\ModelNotFoundException;use think\exception\DbException;use think\Model;use think\Request;use app\backend\model\ProfessionCate;use app\backend\model\CustomerRecord;use app\backend\model\PayStudent;use app\backend\model\Profession as C;class Financing extends Common{    public function __construct(Request $request = null)    {        parent::__construct($request);        // 工种分类        $pro_cate_list= ProfessionCate::all();        $this->assign('pro_cate_list',$pro_cate_list);        // 支付方式        $proceeds_type = ProceedsType::all();        $this->assign('proceeds_type',$proceeds_type);        // 状态        $status_list = (new PayStudent())->statusList();        $this->assign('status_list',$status_list);        // 企业名称        $company_name = \app\backend\model\Customer::all([            'from' => 2        ]);        $this->assign('company_name',$company_name);        // 班主任        $aulist = AdminUser::all(['group_id' => 4]);        $this->assign('aulist',$aulist);        //职业技能提升        $occu_profession = OccuProfession::where('pid',0)->select();        $this->assign('profession',$occu_profession);        $company = Company::all(['status'=>1]);        $this->assign('company',$company);    }    /**     * 入账出账审核     */    public function check(){        $type = $this->request->param('type');        $id = $this->request->post('id');        if($type == 'ru'){            \app\backend\model\Occupation::where('id',$id)->update(['ru_status'=>1]);        }elseif ($type == 'chu'){            \app\backend\model\Occupation::where('id',$id)->update(['chu_status'=>1]);        }        ajaxReturn(200, '审核成功');    }    public function checks(){        $id = $this->request->post('id');        \app\backend\model\OccuRecord::where('id',$id)->update(['status'=>1]);        ajaxReturn(200, '审核成功');    }    /**     * 客户列表     * @access public     * @return mixed [type] 页面     * @throws DbException     */    public function statistics_index(){        $aulist = AdminUser::all();        $ware_id = $this->request->param('ware_id',1);        $this->assign([            'aulist' => $aulist,            'ware_id' => $ware_id        ]);        return  $this->fetch();    }    /**     * 企业客户财务统计数据     * @throws DbException     */    public function getQyData()    {        $param = $this->request->param();        $where = FinancingLogic::selectParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new PayLog())            ->where($where)            ->where('from',2)            ->group('company_id')            ->order('id DESC')            ->paginate($param['limit'])            ->each(function ($item){                $pay_price = PayLog::where('company_id',$item['company_id'])->group('batch_number')->column('pay_price');                $item['pay_price'] = array_sum($pay_price);                $total_price = PayStudent::where('company_id',$item['company_id'])->column('total_price');                $item['total_price'] = array_sum($total_price);                $company = Company::get($item['company_id']);                $company['admin'] = AdminUser::get($company['auid']);                $item['company'] = $company;                return $item;            });        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list->items());    }    /**     * 个人客户财务统计数据     * @throws DbException     */    public function getGrData(){        $param = $this->request->param();        $where = FinancingLogic::selectGrParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new PayStudent())            ->with('admin,authGroup,profession')            ->where($where)            ->where(['from' => 1])            ->order('id DESC')            ->paginate($param['limit']);        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list->items());    }    /**     * 财务个人审核页面     * @return mixed     * @throws DbException     */    public function audit_index(){        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $aulist = AdminUser::all($where);        $this->assign([            'aulist' => $aulist,            'ware_id' => $this->request->param('ware_id','1')        ]);        return $this->fetch();    }        /**     * 财务企业审核页面     * @return mixed     * @throws DbException     */    public function qiye_index(){        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $aulist = AdminUser::all($where);        $this->assign([            'aulist' => $aulist,            'ware_id' => $this->request->param('ware_id','1')        ]);        return $this->fetch();    }        /**     * 财务发票审核页面     * @return mixed     * @throws DbException     */    public function receipt_index(){        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $input = input();        $batch = isset($input['batch']) ? $input['batch'] : 0;        $aulist = AdminUser::all($where);        $this->assign([            'aulist' => $aulist,            'ware_id' => $this->request->param('ware_id','1'),            'batch'=>$batch        ]);        return $this->fetch();    }    /**     * 财务审核数据     * @throws DbException     */    public function getAuditData(){        $param = $this->request->param();        $where = FinancingLogic::selectAuditParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        //这个from时候批量号        $from = $param['from'] == 1 ? ['from'=>$param['from']] : ['batch_number'=>$param['from']];        $list = (new PayLog())            ->where($where)            ->where($from)            ->order('id DESC')            ->paginate($param['limit']);        $list_items = $list->items();        foreach ($list_items as $k => $v){            // 客户信息            $pay_student_id = $v['pay_student_id'];            $customer = (new \app\backend\model\Customer())                ->with('admin')                ->where(function ($query) use ($pay_student_id){                    $customer_id = (new PayStudent())                        ->where('id',$pay_student_id)                        ->value('customer_id');                    $query->where('id',$customer_id);                })                ->find();            $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);            $list_items[$k]['pay_student'] = $pay_student;            $list_items[$k]['customer'] = $customer;            // 操作人            if (!empty($v['operate_id'])){                $operate = AdminUser::get($v['operate_id']);            }else{                $operate = [                    'real_name' => '未审核'                ];            }            $profession = \app\backend\model\Profession::get($pay_student['profession_id']);            $profession_top = \app\backend\model\Profession::get($pay_student['profession_top_id']);            $list_items[$k]['profession'] = $profession_top['name'].'--'.$profession['name'];            $list_items[$k]['operate'] = $operate;            $list_items[$k]['company'] = Company::where('id',$pay_student['company_id'])->value('company');        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list_items);    }    public function ol_occu()    {        return $this->fetch();    }    /**     * 获取职业技能提升线上班级数据     * @throws DbException     */    public function getOlData(){        $param = $this->request->param();        $where = GradeLogic::selectParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        //线上   线下   线上和线下        if(isset($param['train_site']) && $param['train_site'] != ''){            $where['train_site'] = $param['train_site'];        }        $list = (new Occupation())            ->with('teacher,admin,occupation')            ->where($where)            ->order('id DESC')            ->paginate($this->request->param('limit'))            ->each(function ($item){                $profession_top = \app\backend\model\OccuProfession::get($item['profession_top_id']);                $profession = \app\backend\model\OccuProfession::get($item['profession_id']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' .$profession['name'];                $total_price = OccupationStudent::where('grade_id',$item['id'])->sum('price');                $item['total_price'] = $total_price;                $tui_price = OccuRecord::where('customer_id',$item['id'])->sum('price');                $item['tui_price'] = $tui_price;                return $item;            });        $data = $list->items();        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $data);    }    /**     * 财务审核数据     * @throws DbException     */    public function getReceiptData(){        $param = $this->request->param();        $where = InvoiceLogic::selectAuditParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        if(isset($param['batch']) && !empty($param['batch'])){            $where['batch_number'] = $param['batch'];        }        if(isset($param['from']) && !empty($param['from'])){            $where['from'] = $param['from'];        }        $list = (new InvoiceLog())            ->where($where)            ->order('id DESC')            ->paginate($param['limit']);        $list_items = $list->items();        foreach ($list_items as $k => $v){            $pay_student_id = $v['pay_student_id'];            $customer = (new \app\backend\model\Customer())                ->with('admin')                ->where(function ($query) use ($pay_student_id){                    $customer_id = (new PayStudent())                        ->where('id',$pay_student_id)                        ->value('customer_id');                    $query->where('id',$customer_id);                })                ->find();            $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);            $list_items[$k]['pay_student'] = $pay_student;            $list_items[$k]['customer'] = $customer;             // 操作人            if (!empty($v['operate_id'])){                $operate = AdminUser::get($v['operate_id']);            }else{                $operate = [                    'real_name' => '未审核'                ];            }            $profession_top = \app\backend\model\Profession::get($pay_student['profession_top_id']);            $profession = \app\backend\model\Profession::get($pay_student['profession_id']);            $list_items[$k]['profession'] = $profession_top['name'].'--'.$profession['name'];            $list_items[$k]['operate'] = $operate;        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list_items);    }    /**     * 获取下拉菜单数据     * @throws DbException     */    public function selectData(){        $cate_id = $this->request->param('cate_id');        $data = C::all([            'cate_id' => $cate_id,            'pid' => 0        ]);        $this->success('','',$data);    }    /**     * 获取下拉菜单数据     * @throws DbException     */    public function selectSonData(){        $cate_id = $this->request->param('cate_id');        $data = C::all([            'cate_id' => $cate_id,            'pid' => ['<>','0']        ]);        $this->success('','',$data);    }    /**     * 获取工种报名费用     * @throws DbException     */    public function getPrice(){        $profession_id = $this->request->param('profession_id');        $data = C::get($profession_id);        $this->success('','',$data);    }    /**     * 客户详情     * @access public     * @return mixed [type] 页面     * @throws DbException     * @throws DataNotFoundException     * @throws ModelNotFoundException     */    public function detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            if ($param['ware_id'] == 1){                $ress= (new CompanyCustomerBatch())                    ->with('customer.admin')                    ->where('id',$param['id'])                    ->find();            }else{                $ress= (new PayStudent())                    ->with('profession')                    ->where('id',$param['id'])                    ->find();            }            $where = [];            if (!empty($ress['batch_number'])){                $where['batch_number'] = $ress['batch_number'];            }else{                $where['pay_student_id'] = $ress['id'];            }            $pay_log = (new PayLog())                ->where($where)                ->select();//            var_dump($ress->toArray());die;        }else{            $this->error('页面出错了！');        }        $href = url($this->request->param('refund'),[            'ware_id' => $this->request->param('ware_id',1)        ]);        $data=['param'=>$param,'refund' => $href];        $this->assign('data',$data);        $this->assign('ress',$ress);        $this->assign('pay_log',$pay_log);        if ($param['ware_id'] == 2){            return  $this->fetch();        }else{            return  $this->fetch('financing/company_detail');        }    }    /**     * 财务审核查看     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function audit_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new PayLog())                ->where('id',$param['id'])                ->find();            if (!empty($ress['batch_number'])){                $price_relation = (new CompanyCustomerBatch())                    ->where('batch_number',$ress['batch_number'])                    ->find();                $customer = (new \app\backend\model\Customer())                    ->where('id',$price_relation['customer_id'])                    ->find();            }else {                $price_relation = (new PayStudent())                    ->with('profession,professionTop')                    ->where('id',$ress['pay_student_id'])                    ->find();                $customer = (new \app\backend\model\Customer())                    ->where('id',$price_relation['customer_id'])                    ->find();                if (empty($customer)){                    $customer = $price_relation;                }            }            $ress['id_card'] = PayStudent::where('customer_id',$customer['id'])->value('id_card');            $ress['price_relation'] = $price_relation;            $ress['customer'] = $customer;        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }        /**     * 财务审核查看     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function receipt_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new InvoiceLog())                ->where('id',$param['id'])                ->find();            $pay_student_id = $ress['pay_student_id'];            $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);            $ress['pay_student'] = $pay_student;        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress, 'param'=>$param];        // var_dump($data);exit;        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 发票信息     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function receipt()    {        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new InvoiceLog())                ->where('id',$param['id'])                ->whereOr('batch_number',$param['id'])                ->find();            $pay_student_id = $ress['pay_student_id'];            $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);            $ress['pay_student'] = $pay_student;        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 主管审核页面     * @return mixed     */    public function zhuguan_check()    {        $status = ['待审核','审核通过','审核拒绝'];        $this->assign('ware_id',1);        $this->assign('status',$status);        return $this->fetch();    }    /**     * 获取申请记录     * @throws DbException     */    public function get_apply()    {        $param = $this->request->param();        $where = ['status'=>$param['status']];        $list = (new Apply())            ->with('admin,company')            ->where($where)            ->order('id DESC')            ->paginate($param['limit']);        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list->items());    }    /**     * 审核操作     * @throws DbException     */    public function apply()    {        $ids = input('ids');        $status = input('status');        $apply = Apply::get($ids);        $company_id = $apply['company_id'];        if(!$apply){            $this->error('该审核不存在');        }        $apply->save(['status'=>$status,'check_id'=>$this->ausess()['auid'],'check_time'=>time()]);        if($status == 1){            Company::where('id',$company_id)->update(['is_free'=>1]);        }        $this->success('处理成功');    }    /**     * 财务审核查看     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function qiye_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new PayLog())                ->where('id',$param['id'])                ->find();//            if (!empty($ress['batch_number'])){////                $price_relation = (new CompanyCustomerBatch())////                    ->where('batch_number',$ress['batch_number'])////                    ->find();////                $customer = (new \app\backend\model\Customer())////                    ->where('id',$price_relation['customer_id'])////                    ->find();////            }else {                $price_relation = (new PayStudent())                    ->with('profession,professionTop')                    ->where('id',$ress['pay_student_id'])                    ->find();                $customer = (new \app\backend\model\Customer())                    ->where('id',$price_relation['customer_id'])                    ->find();                if (empty($customer)){                    $customer = $price_relation;                }//            }            $ress['price_relation'] = $price_relation;            $ress['customer'] = $customer;        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 劳务派遣页面     * @return mixed     */    public function labour_index(){        $ware_id = $this->request->param('ware_id',1);        $this->assign([            'ware_id' => $ware_id        ]);        return  $this->fetch();    }    /**     * 回款记录     * @throws DbException     */    public function getReturnedData(){        $param = $this->request->param();        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new LabourCompanyReturned())            ->with('admin,company')            ->where($where)            ->order('id DESC')            ->paginate($param['limit']);        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list->items());    }    /**     * 退款记录     * @throws DbException     */    public function getRefundData(){        $param = $this->request->param();        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $list = (new LabourCompanyRefund())            ->with('admin,labour')            ->where($where)            ->order('id DESC')            ->paginate($param['limit']);        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list->items());    }    /**     * 客户数据下载     * @access public     * @return void [type]     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function down1(){      $param=input('param.');      if (!empty($param)){          $param = $this->request->param();          $where = FinancingLogic::selectParam($param,$this->ausess());          $list = (new CompanyCustomerBatch())              ->with('customer.admin')              ->where($where)              ->select();          foreach ($list as $k => $v){              $list[$k]['admin'] = $v['customer']['admin'];          }          $data=$this->get_down_company_list($list);          $excel_name='企业客户财务统计_'.date('YmdHis');      }else{          $param = $this->request->param();          $where = FinancingLogic::selectGrParam($param,$this->ausess());          $list = (new PayStudent())              ->with('admin,authGroup,profession')              ->where($where)              ->where(['from' => 1])              ->select();          foreach ($list as $k => $v){              if (!empty($v['customer_id'])){                  $customer = \app\backend\model\Customer::get($v['customer_id']);                  $list[$k]['customer'] = $customer;              }          }          $data = $this->get_down_list($list);          $excel_name='个人客户财务统计_'.date('YmdHis');      }        FinancingLogic::down($data,$excel_name,$param['ware_id']);    }    /**     * 退款同意     * @throws DbException     */    public function refund_consent()    {        if(request()->isPost()){            $param = $this->request->param();            $pay_log = LabourCompanyRefund::get($param['id']);            if(!$pay_log || ($pay_log && $pay_log['status'] != 0)){                $this->error('该记录不存在或已处理');            }            $pay_log->save(['status'=>1]);            $this->success('审核操作完成');        }    }    /**     * 退款拒绝     * @throws DbException     */    public function refund_refuse()    {        if(request()->isPost()){            $param = $this->request->param();            $pay_log = LabourCompanyRefund::get($param['id']);            if(!$pay_log || ($pay_log && $pay_log['status'] != 0)){                $this->error('该记录不存在或已处理');            }            $pay_log->save(['status'=>2]);            $this->success('审核操作完成');        }    }    /**     * 回款同意     * @throws DbException     */    public function return_consent()    {        if(request()->isPost()){            $param = $this->request->param();            $pay_log = LabourCompanyReturned::get($param['id']);            if(!$pay_log || (isset($pay_log) && $pay_log['status'] != 0)){                $this->error('该记录不存在或已处理');            }            $pay_log->save(['status'=>1]);            $this->success('审核操作完成');        }    }    /**     * 回款拒绝     * @throws DbException     */    public function return_refuse()    {        if(request()->isPost()){            $param = $this->request->param();            $pay_log = LabourCompanyReturned::get($param['id']);            if(!$pay_log || (isset($pay_log) && $pay_log['status'] != 0)){                $this->error('该记录不存在或已处理');            }            $pay_log->save(['status'=>2]);            $this->success('审核操作完成');        }    }    /**     * 客户数据下载     * @access public     * @return void [type]     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function down(){            $param = $this->request->param();            $list_items = (new PayLog())                ->where('id','in',$param['ids'])                ->order('id DESC')//                ->paginate(100);                ->select();            foreach ($list_items as $k => $v){                // 客户信息                $pay_student_id = $v['pay_student_id'];                $customer = (new \app\backend\model\Customer())                    ->with('admin')                    ->where(function ($query) use ($pay_student_id){                        $customer_id = (new PayStudent())                            ->where('id',$pay_student_id)                            ->value('customer_id');                        $query->where('id',$customer_id);                    })->find();                $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);                $list_items[$k]['pay_student'] = $pay_student;                $list_items[$k]['customer'] = $customer;                // 操作人                if (!empty($v['operate_id'])){                    $operate = AdminUser::get($v['operate_id']);                }else{                    $operate = [                        'real_name' => '未审核'                    ];                }                $list_items[$k]['operate'] = $operate;                $list_items[$k]['profession_top'] = \app\backend\model\Profession::where('id',$pay_student['profession_top_id'])->value('name');                $list_items[$k]['profession'] = \app\backend\model\Profession::where('id',$pay_student['profession_id'])->value('name');            }            $excel_name='客户财务审核导出_'.date('YmdHis');            FinancingLogic::down($list_items,$excel_name);    }    /**     * 班级导出     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function gra_down(){        $param = $this->request->param();        $list_items = (new \app\backend\model\Grade())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $k=>$val){            $list_items[$k]['teacher'] = AdminUser::where('id',$val['teacher_id'])->value('real_name');            $list_items[$k]['mobile'] = AdminUser::where('id',$val['teacher_id'])->value('mobile');            $list_items[$k]['profession_top'] = $profession_top = \app\backend\model\Profession::where('id',$val['profession_top_id'])->value('name');            $list_items[$k]['profession'] = $profession = \app\backend\model\Profession::where('id',$val['profession_id'])->value('name');            $list_items[$k]['profession_name'] = $profession_top.'-'.$profession;            $list_items[$k]['admin'] = AdminUser::where('id',$val['admin_id'])->value('real_name');        }        $excel_name='班级导出_'.date('YmdHis');        FinancingLogic::gra_down($list_items,$excel_name);    }    /**     * 学生导出     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function stu_down()    {        $param = $this->request->param();        $list_items = (new \app\backend\model\GradeStudent())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $k=>$val){            $list_items[$k]['pay_student'] = PayStudent::where('id',$val['pay_student_id'])->value('name');            $list_items[$k]['mobile'] = PayStudent::where('id',$val['pay_student_id'])->value('mobile');            $list_items[$k]['company'] = PayStudent::where('id',$val['pay_student_id'])->value('company');            $grade = \app\backend\model\Grade::where('id',$val['grade_id'])->find();            $list_items[$k]['grade'] = $grade['name'];            $list_items[$k]['teacher'] = AdminUser::where('id',$grade['teacher_id'])->value('real_name');            $list_items[$k]['profession_top'] = $profession_top = \app\backend\model\Profession::where('id',$grade['profession_top_id'])->find();            $list_items[$k]['profession'] = $profession = \app\backend\model\Profession::where('id',$grade['profession_id'])->find();            $list_items[$k]['profession_name'] = $profession_top['name'].'-'.$profession['name'];            $list_items[$k]['admin'] = AdminUser::where('id',$grade['admin_id'])->value('real_name');        }        $excel_name='学生导出_'.date('YmdHis');        FinancingLogic::stu_down($list_items,$excel_name);    }    /**     * 考试导出     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function exam_down(){        $param = $this->request->param();        $list_items = (new \app\backend\model\Exam())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $k=>$val){            $list_items[$k]['teacher'] = AdminUser::where('id',$val['teacher_id'])->value('real_name');            $list_items[$k]['mobile'] = AdminUser::where('id',$val['teacher_id'])->value('mobile');            $list_items[$k]['profession_top'] = $profession_top = \app\backend\model\Profession::where('id',$val['profession_top_id'])->value('name');            $list_items[$k]['profession'] = $profession = \app\backend\model\Profession::where('id',$val['profession_id'])->value('name');            $list_items[$k]['profession_name'] = $profession_top.'-'.$profession;            $list_items[$k]['admin'] = AdminUser::where('id',$val['admin_id'])->value('real_name');        }        $excel_name='考试导出_'.date('YmdHis');        FinancingLogic::exam_down($list_items,$excel_name);    }    /**     * 考试学生导出     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function exam_stu()    {        $param = $this->request->param();        $list_items = (new \app\backend\model\ExamStudent())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $k=>$val){            $list_items[$k]['pay_student'] = PayStudent::where('id',$val['pay_student_id'])->value('name');            $list_items[$k]['mobile'] = PayStudent::where('id',$val['pay_student_id'])->value('mobile');            $list_items[$k]['company'] = PayStudent::where('id',$val['pay_student_id'])->value('company');            $grade = \app\backend\model\Exam::where('id',$val['exam_id'])->find();            $list_items[$k]['grade'] = $grade['name'];            $list_items[$k]['teacher'] = AdminUser::where('id',$grade['teacher_id'])->value('real_name');            $list_items[$k]['profession_top'] = $profession_top = \app\backend\model\Profession::where('id',$grade['profession_top_id'])->find();            $list_items[$k]['profession'] = $profession = \app\backend\model\Profession::where('id',$grade['profession_id'])->find();            $list_items[$k]['profession_name'] = $profession_top['name'].'-'.$profession['name'];            $list_items[$k]['admin'] = AdminUser::where('id',$grade['admin_id'])->value('real_name');        }        $excel_name='考试学生导出_'.date('YmdHis');        FinancingLogic::exam_stu($list_items,$excel_name);    }    /**     * 企业财务审核  企业导出     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function com_down()    {        $param = $this->request->param();        $batch_s = PayLog::where('id','in',$param['ids'])->select();        $list_items = [];        foreach ($batch_s as $item){            $company = Company::where('id',$item['company_id'])->find();            //企业信息            $data['company'] = $company['company'];$data['contact'] = $company['contact'];$data['mobile'] = $company['mobile'];            //批量信息            $data['batch_number'] = $item['batch_number'];            //该批次的学员信息            $pay_student_id = PayLog::where('batch_number',$item['batch_number'])->column('pay_student_id');            //应缴金额            $data['total_price'] = $total_price =  PayStudent::where('id','in',$pay_student_id)->sum('total_price');            //实缴金额            $data['pay_price'] = $pay_price = PayLog::where('batch_number',$item['batch_number'])->value('pay_price');            //余额            $data['price'] = $pay_price - $total_price;            //业务员            $data['admin'] = AdminUser::where('id',$company['auid'])->value('real_name');            array_push($list_items,$data);        }        $excel_name='财务企业审核导出_'.date('YmdHis');        FinancingLogic::com_down($list_items,$excel_name);    }    /**     * 企业财务审核   成员导出     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function qiye_down()    {        $param = $this->request->param();        $list_items = (new \app\backend\model\PayLog())            ->where('id','in',$param['ids'])            ->order('id DESC')            ->select();        foreach ($list_items as $k=>$val){            $list_items[$k]['operate'] = AdminUser::where('id',$val['operate_id'])->value('real_name');            $pay_student = PayStudent::where('id',$val['pay_student_id'])->find();            $list_items[$k]['name'] = $pay_student['name'];$list_items[$k]['id_card'] = $pay_student['id_card'];            $list_items[$k]['total_price'] = $pay_student['total_price'];$list_items[$k]['company'] = Company::where('id',$val['company_id'])->value('company');            $list_items[$k]['admin'] = AdminUser::where('id',$pay_student['auid'])->value('real_name');        }        $excel_name='企业缴费成员导出_'.date('YmdHis');        FinancingLogic::qiye_down($list_items,$excel_name);    }    /**     * 跟进     * @throws \think\Exception     * @throws DbException     */    public function follow(){        $id = $this->request->param('id');        $customer_record = (new OccuRecord())->where(['customer_id' => $id])->order('id DESC')->select();        $total_price = OccupationStudent::where('grade_id',$id)->sum('price');        $tui_price = OccuRecord::where('customer_id',$id)->sum('price');        $this->assign([            'customer_record' => $customer_record,            'id'=>$id,            'total'=>$total_price,            'tui'=>$tui_price        ]);        return $this->fetch('financing/finance_follow');    }    /**     * 导出企业客户数据     * @param $list     * @return mixed     */    public function get_down_company_list($list){        $rs['0']['id']='编号';        $rs['0']['batch_number']='公司批次号';        $rs['0']['company_name']='公司名称';        $rs['0']['name']='企业联系人';        $rs['0']['mobile']='联系人电话';        $rs['0']['total_price']='应缴费用';        $rs['0']['pay_price']='实缴费用';        $rs['0']['surplus_price']='余额';        $rs['0']['admin']='业务员';        $rs['0']['pay_status']='状态';        $rs['0']['apply_num']='培训人员';        $rs['0']['create_time']='创建时间';        foreach ($list as $k => $v) {            $k=$k+1;            $rs[$k]['id']=$v['id'];            $rs[$k]['batch_number']=$v['batch_number'];            $rs[$k]['company_name'] = $v['customer']['company'];            $rs[$k]['name'] = $v['customer']['name'];            $rs[$k]['mobile'] = $v['customer']['mobile'];            $rs[$k]['total_price'] = $v['total_price'];            $rs[$k]['pay_price'] = $v['pay_price'];            $rs[$k]['surplus_price'] = $v['pay_price'] - $v['total_price'];            $rs[$k]['admin'] = $v['admin']['real_name'];            $rs[$k]['pay_status'] = $v['pay_status_text'];            $rs[$k]['apply_num'] = $v['apply_num'];            $rs[$k]['create_time'] = $v['create_time_text'];        }        return $rs;    }    /**     * 导出个人客户数据     * @param $list     * @return mixed     */    public function get_down_list($list){        //数据赋值修改        $rs['0']['id']='编号';        $rs['0']['name']='客户名称';        $rs['0']['mobile']='客户电话';        $rs['0']['total_price']='应缴费用';        $rs['0']['pay_price']='实缴费用';        $rs['0']['surplus_price']='余额';        $rs['0']['profession']='工种';        $rs['0']['admin']='业务员';        $rs['0']['status']='状态';        $rs['0']['create_time']='创建时间';        foreach ($list as $k => $v) {            $v_array = $v->toArray();            $k=$k+1;            $rs[$k]['id']=$v_array['id'];            $rs[$k]['name'] = !empty($v_array['customer']['name']) ? $v_array['customer']['name'] : $v_array['name'];            $rs[$k]['mobile'] = !empty($v_array['customer']['mobile']) ? $v_array['customer']['mobile'] : $v_array['mobile'];            $rs[$k]['total_price'] = $v_array['total_price'];            $rs[$k]['pay_price'] = $v_array['pay_price'];            $rs[$k]['surplus_price'] = $v_array['pay_price'] - $v_array['total_price'];            $rs[$k]['profession'] = $v_array['profession']['name'];            $rs[$k]['admin'] = $v_array['admin']['real_name'];            $rs[$k]['status'] = $v_array['status_text'];            $rs[$k]['create_time'] = $v_array['create_time_text'];        }        return $rs;    }    /**     * 财务审核拒绝操作     * @return mixed     * @throws DbException     */    public function jujue()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_log = PayLog::get($param['id']);            $update_data = [                'feedback' => $param['feedback'],                'status' => 2,                'operate_id' => $this->ausess()['auid'],                'operate_time' => time()            ];            $pay_log->save($update_data);            // 修改客户状态            $student = PayStudent::get($pay_log['pay_student_id']);            $read = new Read();            $read->save(['user_id'=>$student['auid'],'type'=>'15','title'=>'缴费拒绝','content'=>'您好，您有用户缴费被拒绝','create_time'=>time(),'url'=>'']);            if (!empty($student)){                $student->feedback = $update_data['feedback'];                $student->status = '-3';                $student->save();            }            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }    /**     * 财务审核发票拒绝操作     * @return mixed     * @throws DbException     */    public function receipt_jujue()    {        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_log = InvoiceLog::get($param['id']);            $update_data = [                'feedback' => $param['feedback'],                'status' => 2,                'operate_id' => $this->ausess()['auid'],                'operate_time' => time()            ];            $auid = Company::where('id',$pay_log['company_id'])->value('auid');            $pay_log->save($update_data);            $read = new Read();            $read->save(['user_id'=>$auid,'type'=>17,'title'=>'发票拒绝','content'=>'您好，您有用户申请的发票被拒绝，请尽快处理','create_time'=>time(),'url'=>'']);            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }        /**     * 财务审核企业拒绝操作     * @return mixed     * @throws DbException     */    public function qiye_jujue(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_log = PayLog::get($param['id']);            $update_data = [                'feedback' => $param['feedback'],                'status' => 2,                'operate_id' => $this->ausess()['auid'],                'operate_time' => time()            ];            $pay_log->save($update_data);            // 修改客户状态            $student = PayStudent::get($pay_log['pay_student_id']);            //通知            $read = new Read();            $read->save(['user_id'=>$student['auid'],'type'=>15,'title'=>'缴费拒绝','content'=>'您好，您有企业客户缴费被拒绝，请尽快处理','create_time'=>time(),'url'=>'']);            if (!empty($student)){                $student->feedback = $update_data['feedback'];                $student->status = '-3';                $student->save();            }            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }    /**     * 财务审核通过     * @throws DbException     * @throws \think\Exception     */    public function tongyi(){        if(request()->isPost()){            $param = $this->request->param();            $pay_log = PayLog::get($param['id']);            // 修改支付记录            $update_data = [                'status' => 1,                'operate_id' => $this->ausess()['auid'],                'operate_time' => time()            ];            $pay_log->save($update_data);            // 修改客户状态            $student = PayStudent::get($pay_log['pay_student_id']);            if (!empty($student)){                $student->status = 2;                if ($pay_log['pay_price'] + $student['pay_price'] >= $student['total_price']){                    $student->pay_end_time = time();                    $student->pay_status = 1;                }                $student->save();            }else{                $company = CompanyCustomerBatch::get(['batch_number' => $pay_log['batch_number']]);                if (!empty($company)){                    if ($pay_log['pay_price'] + $company['pay_price'] >= $company['total_price']){                        $company->pay_end_time = time();                        $company->pay_status = 1;                    }                    $company->setInc('pay_price',$pay_log['pay_price']);                }            }            //财务审核通过  给业务老师发消息            $read = new Read();            $read->save(['user_id'=>$student['auid'],'type'=>'1','title'=>'待培训通知','content'=>'您好，您有客户待培训，请进快处理','create_time'=>time(),'url'=>'backend/Grade/ol_index']);            $this->success('审核操作完成');        }    }        /**     * 财务审核发票通过     * @throws DbException     * @throws \think\Exception     */    public function receipt_tongyi(){        if(request()->isPost()){            $param = $this->request->param();            $pay_log = InvoiceLog::get($param['id']);            $stu_auid = PayStudent::where('id',$pay_log['pay_student_id'])->value('auid');            // 修改支付记录            $update_data = [                'status' => 1,                'operate_id' => $this->ausess()['auid'],                'operate_time' => time()            ];            $pay_log->save($update_data);            $read = new Read();            $read->save(['user_id'=>$stu_auid,'type'=>'4','title'=>'代领发票通知','content'=>'您好，您的客户发票审核已通过，请尽快处理','create_time'=>time(),'url'=>'']);            $this->success('审核操作完成');        }    }     /**     * 财务审核企业通过     * @throws DbException     * @throws \think\Exception     */    public function qiye_tongyi(){        if(request()->isPost()){            $param = $this->request->param();            $pay_log = PayLog::get($param['id']);            // 修改支付记录            $update_data = [                'status' => 1,                'operate_id' => $this->ausess()['auid'],                'operate_time' => time()            ];            $pay_log->save($update_data);            // 修改客户状态            $student = PayStudent::get($pay_log['pay_student_id']);            if (!empty($student)){                //企业信息                $company = Company::get($student['company_id']);                //缴费审核过后  改变状态  如果是特权用户 就让他直接可领证                $student->status = $company['is_free'] == 0 ? 2 : 7;                if ($pay_log['pay_price'] + $student['pay_price'] >= $student['total_price']){                    $student->pay_end_time = time();                    $student->pay_status = 1;                }                $student->save();            }else{                $company = CompanyCustomerBatch::get(['batch_number' => $pay_log['batch_number']]);                if (!empty($company)){                    if ($pay_log['pay_price'] + $company['pay_price'] >= $company['total_price']){                        $company->pay_end_time = time();                        $company->pay_status = 1;                    }                    $company->setInc('pay_price',$pay_log['pay_price']);                }            }            //财务审核通过  给业务老师发消息            $read = new Read();            $read->save(['user_id'=>$student['auid'],'type'=>'1','title'=>'待培训通知','content'=>'您好，您有客户待培训，请进快处理','create_time'=>time(),'url'=>'backend/Grade/ol_index']);            $this->success('审核操作完成');        }    }    /**     * 业务提成列表     * @return mixed     * @throws DbException     */    public function deduct_index(){        $where = [            'department_id' => ['in','1,11,12']        ];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $department_id = $this->ausess()['department_id'];        if (!empty($department_id) && !in_array($department_id,['2','7'])){            $where['id'] = $this->ausess()['auid'];        }        $aulist = AdminUser::all($where);        $this->assign([            'aulist' => $aulist        ]);        return  $this->fetch();    }    /**     * 获取业务提成数据     * @throws DbException     */    public function getDeductData(){        $param = $this->request->param();        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        if (!empty($param['auid'])){            $where['admin_id'] = $param['auid'];        }        $department_id = $this->ausess()['department_id'];        if (!empty($department_id) && !in_array($department_id,['2','7'])){            $where['admin_id'] = $this->ausess()['auid'];        }        // 创建时间        if(isset($param['action_time']) && !empty($param['action_time'])){            $where['create_time'] = ['>=' , strtotime($param['action_time'])];        }        // 创建时间截止查询时间        if(isset($param['end_time']) && !empty($param['end_time'])){            $end_time = strtotime(date($param['end_time'] . ' 23:59:59'));            if (!empty($where['create_time'])){                $where['create_time'] = ['between' , [strtotime($param['action_time']),$end_time]];            }else{                $where['create_time'] = ['<=' , $end_time];            }        }        $list = (new AdminDeduct())            ->with('admin,profession,student')            ->where($where)            ->order('id DESC')            ->paginate($param['limit'])            ->each(function ($item){                $profession_top = C::get($item['profession']['pid']);                $item['profession_name_text'] = $profession_top['name'] . ' - - ' . $item['profession']['name'];                //$item['status'] = $item['status'] == 0 ? "未审核" : ($item['status'] == 1 ? "审核通过" : "审核拒绝");                return $item;            });        $data = $list->items();        layuiReturn(0,'',$list->count(),$data);    }    /**     * 提成同意     */    public function deduct_tongyi()    {        if(request()->isPost()) {            $id = input('id');            AdminDeduct::where('id',$id)->update(['status'=>1]);            $this->success('审核成功');        }    }    /**     * 提成拒绝     */    public function deduct_jujue()    {        if(request()->isPost()) {            $id = input('id');            AdminDeduct::where('id',$id)->update(['status'=>2]);            $this->success('拒绝成功');        }    }    /**     * 财务审核页面     * @return mixed     * @throws DbException     */    public function refund_index(){        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $input = input();        $batch = isset($input['batch']) ? $input['batch'] : 0;        $aulist = AdminUser::all($where);        $this->assign([            'aulist' => $aulist,            'admin' => $this->ausess(),            'ware_id' => $this->request->param('ware_id','1'),            'batch'=>$batch        ]);        return $this->fetch();    }    /**     * 发票信息     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function refund()    {        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new RefundLog())                ->where('id',$param['id'])                ->whereOr('batch_number',$param['id'])                ->find();            $pay_student_id = $ress['pay_student_id'];            $ress['company_name'] = Company::where('id',$ress['company_id'])->value('company');            $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);            $ress['pay_student'] = $pay_student;        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 财务审核页面   企业退费     * @return mixed     * @throws DbException     */    public function refund_qiye(){        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $aulist = AdminUser::all($where);        $this->assign([            'aulist' => $aulist,            'admin' => $this->ausess(),            'ware_id' => $this->request->param('ware_id','1')        ]);        return $this->fetch();    }    /**     * 财务审核数据     * @throws DbException     */    public function qiyeRefundLogData(){        $input = input();        $status = isset($input['status']) && !empty($input['status']) ? $input['status'] : 0;        $keyword = isset($input['keyword']) && !empty($input['keyword']) ? $input['keyword'] : "";        $pay_log = RefundLog::where('status',$status)->where('batch_number is not null')->where(function ($query)use($keyword){            if($keyword){                $company_id = Company::where('mobile like %'.$keyword.'% or company like %'.$keyword.'%')->column('id');                $query->where('batch_number like %'.$keyword.'% or company in '.$company_id);            }        })->group('batch_number')->paginate($input['limit']);        foreach ($pay_log as $key=>$value){            $pay_student_id = RefundLog::where('batch_number',$value['batch_number'])->column('pay_student_id');            $company = Company::get($value['company_id']);            $pay_log[$key]['company'] = $company['company']; $pay_log[$key]['contact'] = $company['contact'];  $pay_log[$key]['mobile'] = $company['mobile'];        }        layuiReturn($this->errCode('OK'), '获取成功',$pay_log->count(),$pay_log->items());    }    /**     * 财务审核数据     * @throws DbException     */    public function getRefundLogData(){        $param = $this->request->param();        $where = FinancingLogic::selectAuditParam($param,$this->ausess());        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        if (isset($where['status']) && $where['status'] == 0){            $where['status'] = ['in','0,3,5'];        }elseif (isset($where['status']) && $where['status'] == 2){            $where['status'] = ['in','2,4,6'];        }        if(isset($param['batch']) && !empty($param['batch'])){            $where['batch_number'] = $param['batch'];        }        if(isset($param['from']) && !empty($param['from'])){            $where['from'] = $param['from'];        }        $list = (new RefundLog())            ->where($where)            ->order('id DESC')            ->paginate($param['limit']);        $list_items = $list->items();        foreach ($list_items as $k => $v){            $pay_student_id = $v['pay_student_id'];            $customer = (new \app\backend\model\Customer())                ->with('admin')                ->where(function ($query) use ($pay_student_id){                    $customer_id = (new PayStudent())                        ->where('id',$pay_student_id)                        ->value('customer_id');                    $query->where('id',$customer_id);                })                ->find();            $pay_student = (new PayStudent())->with('admin')->find(['id' => $pay_student_id]);            $list_items[$k]['pay_student'] = $pay_student;            $list_items[$k]['customer'] = $customer;            // 操作人            if (!empty($v['operate_id'])){                $operate = AdminUser::get($v['operate_id']);            }else{                $operate = [                    'real_name' => '未审核'                ];            }            $list_items[$k]['operate'] = $operate;            // 财务主管审核            if (!empty($v['zg_check_id'])){                $zg = AdminUser::get($v['zg_check_id']);            }else{                $zg = [                    'real_name' => '未审核'                ];            }            $list_items[$k]['zg'] = $zg;            // 老板审核            if (!empty($v['lb_check_id'])){                $lb = AdminUser::get($v['lb_check_id']);            }else{                $lb = [                    'real_name' => '未审核'                ];            }            $list_items[$k]['lb'] = $lb;        }        layuiReturn($this->errCode('OK'), '获取成功', $list->count(), $list_items);    }    /**     * 财务审核查看     * @return mixed     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function refund_detail(){        $param=input('param.');        if(isset($param['id']) && !empty($param['id'])){            $ress= (new RefundLog())                ->with(['student' => ['profession']])                ->where('id',$param['id'])                ->find()->toArray();//            dump($ress);die;        }else{            $this->error('页面出错了！');        }        $data=['ress'=>$ress, 'param'=>$param];        $this->assign('data',$data);        return  $this->fetch();    }    /**     * 退款审核拒绝操作     * @return mixed     * @throws DbException     */    public function refund_jujue1(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_log = RefundLog::get($param['id']);            $admin = $this->ausess();            // 判断是否可以修改            if (($pay_log['status'] >= 1 && $admin['group_id'] == 11)){                $this->error('请勿重复审核');            }            if (($pay_log['status'] >= 3 && $admin['group_id'] == 11)){                $this->error('请勿重复审核');            }            if (($pay_log['status'] >= 5 && $admin['group_id'] == 11)){                $this->error('请勿重复审核');            }            // 修改支付记录，并判断权限            $group_id = $this->ausess()['group_id'];            if ($group_id == 14 || $group_id == 1){                // 老板                $update_data = [                    'status' => 6,                    'lb_check' => 2,                    'lb_check_id' => $this->ausess()['auid'],                    'lb_check_time' => time(),                    'lb_feedback' => $param['feedback']                ];            }elseif ($group_id == 10){                // 财务主管                $update_data = [                    'status' => 4,                    'zg_check' => 2,                    'zg_check_id' => $this->ausess()['auid'],                    'zg_check_time' => time(),                    'zg_feedback' => $param['feedback']                ];            }elseif ($group_id == 11){                // 财务                $update_data = [                    'status' => 2,                    'operate_id' => $this->ausess()['auid'],                    'check_time' => time(),                    'feedback' => $param['feedback']                ];            }else{                $this->error('请联系财务、财务主管或老板审核');            }            $pay_log->save($update_data);            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }    /**     * 退款审核拒绝操作     * @return mixed     * @throws DbException     */    public function refund_jujue(){        if(var_export(Request::instance()->isAjax(), true)==='true'){            $param = $this->request->param();            $pay_log = RefundLog::get($param['id']);            $stu_auid = PayStudent::where('id',$pay_log['pay_student_id'])->value('auid');            // 老板            $update_data = [                'status' => 2,                'operate_id' => $this->ausess()['auid'],                'check_time' => time(),                'feedback' => $param['feedback']            ];            $pay_log->save($update_data);            $read = new Read();            $read->save(['type'=>19,'user_id'=>$stu_auid,'title'=>'退费拒绝','content'=>'您好，您有客户的退费被拒绝，请尽快处理','create_time'=>time(),'url'=>'']);            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }    /**     * 退款审核通过     * @return mixed     * @throws DbException     */    public function refund_tongyi1(){        if(request()->isPost()){            $param = $this->request->param();            $pay_log = RefundLog::get($param['id']);            $admin = $this->ausess();            // 判断是否可以修改            if (($pay_log['status'] >= 1 && $admin['group_id'] == 11)){                $this->error('请勿重复审核');            }            if (($pay_log['status'] >= 3 && $admin['group_id'] == 10)){                $this->error('请勿重复审核');            }            if (($pay_log['status'] >= 5 && $admin['group_id'] == 14)){                $this->error('请勿重复审核');            }            // 修改支付记录，并判断权限            $group_id = $this->ausess()['group_id'];            $admin_id = $this->ausess()['auid'];            if ($group_id == 14 || $group_id == 1){                // 老板                $update_data = [                    'status' => 1,                    'lb_check' => 1,                    'lb_check_id' => $admin_id,                    'lb_check_time' => time()                ];            }elseif ($group_id == 10){                // 财务主管                $update_data = [                    'status' => 5,                    'zg_check_id' => $admin_id,                    'zg_check_time' => time(),                    'zg_check'=>1                ];            }elseif ($group_id == 11){                // 财务                $update_data = [                    'status' => 3,                    'operate_id' => $admin_id,                    'check_time' => time()                ];            } else{                $this->error('请联系财务、财务主管或老板审核');            }            $pay_log->save($update_data);            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }    /**     * 退款审核通过     * @return mixed     * @throws DbException     */    public function refund_tongyi(){        if(request()->isPost()){            $param = $this->request->param();            $pay_log = RefundLog::get($param['id']);            $admin_id = $this->ausess()['auid'];            $update_data = [                'status' => 1,                'operate_id' => $admin_id,                'check_time' => time()            ];            PayStudent::where('id',$pay_log['pay_student_id'])->update(['status'=>9]);            $pay_log->save($update_data);            $this->success('审核操作完成');        }        $data = [            'id' => $this->request->param('id')        ];        $this->assign('data',$data);        return $this->fetch();    }    public function student()    {        $param=input('param.');        if (empty($param['ware_id'])){            $this->error('没有该权限');        }        if ($param['ware_id'] != 1){            $this->error('没有该权限');        }        $batch = CompanyCustomerBatch::get($param['id']);        $href = url($this->request->param('refund'),[            'ware_id' => $this->request->param('ware_id',1)        ]);        $data=['param'=>$param,'refund' => $href];        $this->assign('data',$data);        $this->assign([            'batch' => $batch        ]);        return  $this->fetch();    }    /**     * @return mixed     */    public function company(){         $ware_id = $this->request->param('ware_id','1');         $this->assign('ware_id',$ware_id);        return $this->fetch();    }    /**     * 企业按批次缴费     * @return mixed     * @throws DbException     */    public function qiye_money()    {        $param=input('param.');        $pay_log = PayLog::where('batch_number',$param['batch_number'])->find();        $this->assign('ress',$pay_log);        return $this->fetch('financing/qiye_money');    }    /**     * 企业信息     * @throws DbException     */    public function getCompany()    {        $input = input();        $status = isset($input['status']) && !empty($input['status']) ? $input['status'] : 0;        $keyword = isset($input['keyword']) && !empty($input['keyword']) ? $input['keyword'] : "";        $pay_log = PayLog::where('status',$status)->where('batch_number is not null')->where(function ($query)use($keyword){            if($keyword){                $company_id = Company::where('mobile like %'.$keyword.'% or company like %'.$keyword.'%')->column('id');                $query->where('batch_number like %'.$keyword.'% or company in '.$company_id);            }        })->group('batch_number')->paginate($input['limit']);        foreach ($pay_log as $key=>$value){            $pay_student_id = PayLog::where('batch_number',$value['batch_number'])->column('pay_student_id');            //课程总金额            $pay_log[$key]['total_price'] = $total_price =  PayStudent::where('id','in',$pay_student_id)->sum('total_price');            $pay_price = PayLog::where('batch_number',$value['batch_number'])->value('pay_price');            //缴费总金额            $pay_log[$key]['pay_price'] = round($pay_price);            //余额            $pay_log[$key]['price'] = $pay_price - $total_price;            //企业信息            $company = Company::get($value['company_id']);            $pay_log[$key]['company'] = $company['company']; $pay_log[$key]['contact'] = $company['contact'];  $pay_log[$key]['mobile'] = $company['mobile'];        }        layuiReturn($this->errCode('OK'), '获取成功',$pay_log->count(),$pay_log->items());    }    /**     * 发票企业信息     * @return mixed     */    public function receipt_qiye(){        $ware_id = $this->request->param('ware_id','1');        $this->assign('ware_id',$ware_id);        return $this->fetch();    }    /**     * 获取发票信息     * @throws DbException     */    public function qiyeReceiptData()    {        $input = input();        $status = isset($input['status']) && !empty($input['status']) ? $input['status'] : 0;        $keyword = isset($input['keyword']) && !empty($input['keyword']) ? $input['keyword'] : "";        $pay_log = InvoiceLog::where('status',$status)->where('batch_number is not null')->where(function ($query)use($keyword){            if($keyword){                $company_id = Company::where('mobile like %'.$keyword.'% or company like %'.$keyword.'%')->column('id');                $query->where('batch_number like %'.$keyword.'% or company in '.$company_id);            }        })->group('batch_number')->paginate($input['limit']);        foreach ($pay_log as $key=>$value){            $pay_student_id = InvoiceLog::where('batch_number',$value['batch_number'])->column('pay_student_id');            $company = Company::get($value['company_id']);            $pay_log[$key]['company'] = $company['company']; $pay_log[$key]['contact'] = $company['contact'];  $pay_log[$key]['mobile'] = $company['mobile'];        }        layuiReturn($this->errCode('OK'), '获取成功',$pay_log->count(),$pay_log->items());    }    /**     * 企业的成员     * @return mixed     * @throws DbException     */    public function finan_student()    {        $batch_number = input('batch');        $this->assign('batch',$batch_number);        $where = [];        if (!empty($this->campus_id)){            $where['campus_id'] = $this->campus_id;        }else{            //添加人 没有校区的  添加到第一个校区里面            $campus = \app\backend\model\Campus::all();            $where['campus_id'] = array_column($campus,'id')[0];        }        $aulist = AdminUser::all($where);        $status = input('status');        $this->assign([            'aulist' => $aulist,            'status' => $status,            'ware_id' => $this->request->param('ware_id','1')        ]);        return $this->fetch('financing/qiye_index');    }    /**     * 批量缴费审核     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function qiye_check()    {        $input = input();        $id = $input['id'];        $status = $input['status'];        $feedback = isset($input['feedback']) && !empty($input['feedback']) ? $input['feedback'] : "";        PayLog::where('batch_number',$id)->where('status',0)->update(['status'=>$status,'feedback'=>$feedback,'operate_id' => $this->ausess()['auid'], 'operate_time' => time()]);        $pay_student = PayLog::where('batch_number',$id)->where('status',0)->select();        foreach ($pay_student as $key=>$value){            //审核通过            if($status == 1){                $is_free = Company::where('id',$value['company_id'])->value('is_free');                if($is_free == 0){                    PayStudent::where('id',$value['pay_student_id'])->update(['status'=>2,'pay_status'=>1,'pay_end_time'=>time()]);                }else{                    //特权用户  直接可领证                    PayStudent::where('id',$value['pay_student_id'])->update(['status'=>7]);                }            }else{                //审核拒绝                PayStudent::where('id',$value['pay_student_id'])->update(['status'=>-3]);            }        }        $company = PayLog::where('batch_number',$id)->value('company_id');        $stu_auid = Company::where('id',$company)->value('auid');        $read = new Read();        //企业财务审核通过        if($status == 1){            $read->save(['user_id'=>$stu_auid,'type'=>'1','title'=>'待培训通知','content'=>'您好，您有企业用户待培训，请尽快处理','create_time'=>time(),'url'=>'backend/Grade/ol_index']);        }else{            //企业财务审核拒绝            $read->save(['user_id'=>$stu_auid,'type'=>'15','title'=>'企业缴费拒绝','content'=>'您好，您有企业缴费审核被拒绝，请进快处理','create_time'=>time(),'url'=>'backend/Customer/company']);        }        $this->success('审核成功');    }    /**     * 批量发票审核     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function receipt_check()    {        $id = input('id');        $status = input('status');        //更新发票状态        InvoiceLog::where('batch_number',$id)->update(['status'=>$status,'operate_id' => $this->ausess()['auid'], 'operate_time' => time()]);        //企业的业务员id        $company = InvoiceLog::where('batch_number',$id)->value('company_id');        $auid = Company::where('id',$company)->value('auid');        $read = new Read();        if($status == 1){            //企业发票审核通过            $read->save(['user_id'=>$auid,'type'=>'4','title'=>'待领取发票通知','content'=>'您好，您有企业用户发票审核通过，请进快处理','create_time'=>time(),'url'=>'']);        }else{            //企业发票审核拒绝            $read->save(['user_id'=>$auid,'type'=>'17','title'=>'企业发票拒绝','content'=>'您好，您有企业用户发票被拒绝，请进快处理','create_time'=>time(),'url'=>'']);        }        $this->success('审核成功');    }    /**     * 批量退费审核     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function refund_check1()    {        $id = input('id');        $status = input('status');        $pay_student = RefundLog::where('batch_number',$id)->select();        foreach ($pay_student as $value){            //审核通过            if($status == 1){                $pay_log = RefundLog::get($value['id']);                $admin = $this->ausess();                // 判断是否可以修改                if (($pay_log['status'] >= 1 && $admin['group_id'] == 11)){                    $this->error('请勿重复审核');                }                if (($pay_log['status'] >= 3 && $admin['group_id'] == 10)){                    $this->error('请勿重复审核');                }                if (($pay_log['status'] >= 5 && $admin['group_id'] == 14)){                    $this->error('请勿重复审核');                }                // 修改支付记录，并判断权限                $group_id = $this->ausess()['group_id'];                $admin_id = $this->ausess()['auid'];                if ($group_id == 14){                    // 老板                    $update_data = ['status' => 1, 'lb_check' => 1, 'lb_check_id' => $admin_id, 'lb_check_time' => time()];                }elseif ($group_id == 11){                    // 财务主管                    $update_data = ['status' => 5, 'operate_id' => $admin_id, 'check_time' => time()];                }else{                    $this->error('请联系财务、财务主管或老板审核');                }                $pay_log->save($update_data);            }else{                //审核拒绝                $pay_log = RefundLog::get($value['id']);                $admin = $this->ausess();                // 判断是否可以修改                if (($pay_log['status'] >= 1 && $admin['group_id'] == 11)){                    $this->error('请勿重复审核');                }                if (($pay_log['status'] >= 3 && $admin['group_id'] == 11)){                    $this->error('请勿重复审核');                }                if (($pay_log['status'] >= 5 && $admin['group_id'] == 11)){                    $this->error('请勿重复审核');                }                // 修改支付记录，并判断权限                $group_id = $this->ausess()['group_id'];                if ($group_id == 14){                    // 老板                    $update_data = ['status' => 6, 'lb_check' => 2, 'lb_check_id' => $this->ausess()['auid'], 'lb_check_time' => time(), 'lb_feedback' => $param['feedback']];                }elseif ($group_id == 10){                    // 财务主管                    $update_data = ['status' => 4, 'zg_check' => 2, 'zg_check_id' => $this->ausess()['auid'], 'zg_check_time' => time(), 'zg_feedback' => $param['feedback']];                }elseif ($group_id == 11){                    // 财务主管                    $update_data = ['status' => 2, 'operate_id' => $this->ausess()['auid'], 'check_time' => time(), 'feedback' => $param['feedback']];                }else{                    $this->error('请联系财务、财务主管或老板审核');                }                $pay_log->save($update_data);            }        }        $this->success('审核成功');    }    /**     * 批量退费审核     * @throws DataNotFoundException     * @throws DbException     * @throws ModelNotFoundException     */    public function refund_check()    {        $id = input('id');        $status = input('status');        $pay_student = RefundLog::where('batch_number',$id)->select();        foreach ($pay_student as $value){            //审核通过            if($status == 1){                $pay_log = RefundLog::get($value['id']);                $admin = $this->ausess()['auid'];                $update_data = ['status' => 1, 'operate_id' => $admin, 'check_time' => time()];                $pay_log->save($update_data);            }else{                //审核拒绝                $pay_log = RefundLog::get($value['id']);                $update_data = ['status' => 2, 'operate_id' => $this->ausess()['auid'], 'check_time' => time(), 'feedback' => input('feedback')];                $pay_log->save($update_data);            }        }        $company = RefundLog::where('batch_number',$id)->value('company_id');        $auid = Company::where('id',$company)->value('auid');        $read = new Read();        //退费拒绝通知消息        if($status == 2){            $read->save(['user_id'=>$auid,'type'=>19,'title'=>'退费拒绝','content'=>'您好，您有企业用户退费审核拒绝，请尽快处理','create_time'=>time(),'url'=>'']);        }        $this->success('审核成功');    }}