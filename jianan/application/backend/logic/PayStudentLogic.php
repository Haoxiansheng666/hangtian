<?phpnamespace app\backend\logic;use app\backend\model\AdminUser;use app\backend\model\Company;use app\backend\model\PayStudent;use app\backend\model\Profession;use think\Db;use think\Request;class PayStudentLogic{    /**     * 客户查询的逻辑     * @access public     * @param array $param 条件数据     * @param array $ausess 账号的session信息     * @return [array]     * @since dxf     */    static public function selectParam($param, $ausess)    {        $where = [];        //客户名称        if (isset($param['name']) && !empty($param['name'])) {            $where['name'] = array('like', "%$param[name]%");        }        //手机号        if (isset($param['mobile']) && !empty($param['mobile'])) {            $where['mobile'] = array('like', "%$param[mobile]%");        }        if (isset($param['company_id']) && !empty($param['company_id'])) {            $where['company_id'] = $param['company_id'];        }        if (isset($param['batch_number']) && !empty($param['batch_number'])) {            $where['batch_number'] = $param['batch_number'];        }        //添加人        if (isset($param['auid']) && !empty($param['auid'])) {            $where['auid'] = $param['auid'];        }        //学员状态        if (!empty($param['status'])) {            $where['status'] = $param['status'];        }        //工种        if (!empty($param['profession_id'])) {            $where['profession_id'] = $param['profession_id'];        } // 一级栏目        elseif (!empty($param['pid'])) {            $profession_ids = (new Profession())                ->where([                    'pid' => $param['pid']                ])                ->column('id');            $where['profession_id'] = ['in', $profession_ids];        } // 工种类型        elseif (!empty($param['cate_id'])) {            $profession_ids = (new Profession())                ->where([                    'cate_id' => $param['cate_id'],                    'pid' => 0                ])                ->column('id');            $where['profession_id'] = ['in', $profession_ids];        }        if($ausess['group_id'] != 1){            $where['auid'] = $ausess['auid'];        }        if (!empty($param['ids'])){            $where['id'] = ['in',$param['ids']];        }         //来源        if(isset($param['from']) && !empty($param['from'])){            $where['from']=$param['from'];        }        return $where;    }    /**     * 客户数据下载的逻辑     * @access public     * @param array $data 要下载的数据     * @param array $name excel表名称     * @return [file]     * @since dxf     */    static public function down($data, $name,$type = 1,$title = "")    {        vendor('PHPExcel.PHPExcel');        $objPHPExcel = new \PHPExcel();        $objPHPExcel->getActiveSheet()->getStyle('A:N')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);        //遍历数组，注意数组对应的下标        if ($type == 2) {            foreach ($data as $k => $v) {                //合并单元格                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('A1:M2');                $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', $title);                //设置单元格里面的值对齐                $objPHPExcel->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);                $objPHPExcel->setActiveSheetIndex(0)                    ->setCellValue('A' . $k, $v['name'])                    ->setCellValue('B' . $k, ' '.$v['mobile'])                    ->setCellValue('C' . $k, ' '.$v['id_card'])                    //前面加入空格 可以导出的后几位不是0000                    ->setCellValue('D' . $k, $v['company'])                    ->setCellValue('E' . $k, $v['profession_id'])                    ->setCellValue('F' . $k, $v['type'])                    ->setCellValue('G' . $k, $v['total_price'])                    ->setCellValue('H' . $k, $v['recommend_job'])                    ->setCellValue('I' . $k, $v['real_name'])                    ->setCellValue('J' . $k, $v['education'])                    ->setCellValue('K' . $k, $v['account'])                    ->setCellValue('L' . $k, $v['expire'])                    ->setCellValue('M' . $k, $v['password']);            }        } else {            for ($k = 1; $k < count($data); $k++) {                $objPHPExcel->setActiveSheetIndex(0)                    ->setCellValue('A' . $k, $data[$k]['id'])                    ->setCellValue('B' . $k, $data[$k]['user_type'])                    ->setCellValue('C' . $k, $data[$k]['apply_type'])                    ->setCellValue('D' . $k, $data[$k]['name'])                    ->setCellValue('E' . $k, ' '.$data[$k]['mobile'])                    ->setCellValue('F' . $k, $data[$k]['from'])                    ->setCellValue('G' . $k, $data[$k]['profession_id'])                    ->setCellValue('H' . $k, $data[$k]['recommend_job'])                    ->setCellValue('I' . $k, $data[$k]['pay_status'])                    ->setCellValue('J' . $k, $data[$k]['status'])                    ->setCellValue('K' . $k, $data[$k]['pay_end_time'])                    ->setCellValue('L' . $k, $data[$k]['create_time'])                    ->setCellValue('M' . $k, $data[$k]['real_name']);            }        }        ob_end_clean();        header('Content-Type: application/vnd.ms-excel');        header('Content-Disposition: attachment;filename="' . $name . '.xls"');        header('Cache-Control: max-age=0');        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');        exit;    }    /**     * @param $data     * @param $name     * @throws \Exception     */    static public function download($data,$name){        vendor('PHPExcel.PHPExcel');        $objPHPExcel = new \PHPExcel();        $objPHPExcel->getActiveSheet()->getStyle('A:N')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);        //遍历数组，注意数组对应的下标        $objPHPExcel->setActiveSheetIndex(0)            ->setCellValue('A1', '学员姓名')            ->setCellValue('B1', '手机号')            ->setCellValue('C1', '身份证号')            ->setCellValue('D1', '批次号')            ->setCellValue('E1', '工种')            ->setCellValue('F1', '类型')            ->setCellValue('G1', '账号')            ->setCellValue('H1', '密码')            ->setCellValue('I1', '证书到期时间')            ->setCellValue('J1', '学历')            ->setCellValue('K1', '业务员名称')            ->setCellValue('L1', '状态')            ->setCellValue('M1', '所属企业')            ->setCellValue('N1', '添加时间');        foreach($data as $k=>$v){            $k++;            $objPHPExcel->setActiveSheetIndex(0)                ->setCellValue('A'.($k+1), $v['name'])                ->setCellValue('B'.($k+1), ' '.$v['mobile'])                ->setCellValue('C'.($k+1), ' '.$v['id_card'])                ->setCellValue('D'.($k+1), ' '.$v['batch_number'])                ->setCellValue('E'.($k+1), $v['profession_top'])                ->setCellValue('F'.($k+1), $v['profession'])                ->setCellValue('G'.($k+1), $v['account'])                ->setCellValue('H'.($k+1), $v['password'])                ->setCellValue('I'.($k+1), $v['expire'])                ->setCellValue('J'.($k+1), $v['education'])                ->setCellValue('K'.($k+1), $v['admin'])                ->setCellValue('L'.($k+1), $v['status_text'])                ->setCellValue('M'.($k+1), $v['company'])                ->setCellValue('N'.($k+1), $v['create_time']);        }        ob_end_clean();        header('Content-Type: application/vnd.ms-excel');        header('Content-Disposition: attachment;filename="'.$name.'.xls"');        header('Cache-Control: max-age=0');        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');        exit;    }    /**     * 模板下载的表头     * @access public     * @return [array]     * @since dxf     */    static public function muban()    {        $rs[3]['name'] = '客户名称';$rs[3]['mobile'] = '手机号';$rs[3]['id_card'] = '身份证号';$rs[3]['company'] = '单位名称';$rs[3]['profession_id'] = '工种';$rs[3]['type'] = '类型';$rs[3]['total_price'] = '应缴金额';$rs[3]['recommend_job'] = '推荐就业';$rs[3]['real_name'] = '登录账号';$rs[3]['education'] = '学历';$rs[3]['account'] = '账号';$rs[3]['password'] = '密码';$rs[3]['expire'] = '证书到期时间';        $rs[4]['name'] = '张三';$rs[4]['mobile'] = '13213656981';$rs[4]['id_card'] = '410322199205063818';$rs[4]['company'] = '';$rs[4]['profession_id'] = '信号司索工';$rs[4]['type'] = '复审';$rs[4]['total_price'] = '应缴金额';$rs[4]['recommend_job'] = '是';$rs[4]['real_name'] = 'mameng';$rs[4]['education'] = '大学本科';$rs[4]['account'] = 'zhangsan';$rs[4]['password'] = '123456';$rs[4]['expire'] = '2022-12-26';        $rs[5]['name'] = '李四';$rs[5]['mobile'] = '13213656983';$rs[5]['id_card'] = '410322199106043818';$rs[5]['company'] = '百度';$rs[5]['profession_id'] = '施工电梯司机';$rs[5]['type'] = '新办';$rs[5]['total_price'] = '应缴金额';$rs[5]['recommend_job'] = '否';$rs[5]['real_name'] = 'mameng';$rs[5]['education'] = '硕士研究生';$rs[5]['account'] = 'lisi';$rs[5]['password'] = '123456';$rs[5]['expire'] = '';        $rs[6]['name'] = '王五';$rs[6]['mobile'] = '13213656988';$rs[6]['id_card'] = '410322199602053818';$rs[6]['company'] = '';$rs[6]['profession_id'] = '叉车司机N1';$rs[6]['type'] = '复审';$rs[6]['total_price'] = '应缴金额';$rs[6]['recommend_job'] = '是';$rs[6]['real_name'] = 'mameng';$rs[6]['education'] = '博士研究生';$rs[6]['account'] = 'wangwu';$rs[6]['password'] = '123456';$rs[6]['expire'] = '2023-05-06';        return $rs;    }    /**     * 文件上传的字段逻辑     * @access public     * @param file $uploadfile 上传后的文件名     * @param array $ausess 用户数据     *     * @param string $company_id 企业id     * @return [array]     * @since dxf     */    static public function uploadFile($uploadfile, $ausess, $company_id)    {        vendor('PHPExcel.PHPExcel');        vendor('PHPExcel.PHPExcel.IOFactory');        vendor('PHPExcel.PHPExcel.Reader.Excel2007.php');        vendor('PHPExcel.PHPExcel.Reader.Excel5.php');        vendor('PHPExcel.PHPExcel.Reader.CSV.php');        $extension = strtolower(pathinfo($uploadfile, PATHINFO_EXTENSION));        if ($extension == 'xlsx') {            $objReader = new \PHPExcel_Reader_Excel2007();            $objPHPExcel = $objReader->load($uploadfile);        } else if ($extension == 'xls') {            $objReader = new \PHPExcel_Reader_Excel5();            $objPHPExcel = $objReader->load($uploadfile);        } else if ($extension == 'csv') {            $PHPReader = new \PHPExcel_Reader_CSV();            //默认输入字符集            $PHPReader->setInputEncoding('UTF-8');            //默认的分隔符            $PHPReader->setDelimiter(',');            //载入文件            $objPHPExcel = $PHPReader->load($uploadfile);        }        $sheet = $objPHPExcel->getSheet(0);        $highestRow = $sheet->getHighestDataRow();           //取得总行数        $highestColumn = $sheet->getHighestColumn();    //取得总列数        $objWorksheet = $objPHPExcel->getActiveSheet();        //echo '总行数='.$highestRow;        $highestColumnIndex = \PHPExcel_Cell::columnIndexFromString($highestColumn);        $headtitle = array();        $msg = array();        $status = 1;        for ($row = 3; $row <= $highestRow; $row++) {            $strs = array();            //注意highestColumnIndex的列数索引从0开始            for ($col = 0; $col < $highestColumnIndex; $col++) {                $strs[$col] = $objWorksheet->getCellByColumnAndRow($col, $row)->getValue();            }            //检查表头            if ($row == 3) {                if (trim($strs['0']) != '客户名称') {                    $msg = "表头:" . $strs['0'] . "，与要求表头不匹配，请修改为". trim($strs['0']);                    $status = -1;                    break;                }                if (trim($strs['1']) != '手机号') {                    $msg = "表头:" . $strs['1'] . "，与要求表头不匹配，请修改为".trim($strs['1']) ;                    $status = -1;                    break;                }                if (trim($strs['2']) != '身份证号') {                    $msg = "表头:" . $strs['2'] . "，与要求表头不匹配，请修改为".trim($strs['2']) ;                    $status = -1;                    break;                }                if (trim($strs['3']) != '单位名称') {                    $msg = "表头:" . $strs['3'] . "，与要求表头不匹配，请修改为".trim($strs['3']);                    $status = -1;                    break;                }                if (trim($strs['4']) != '工种') {                    $msg = "表头:" . $strs['4'] . "，与要求表头不匹配，请修改为".trim($strs['4']);                    $status = -1;                    break;                }                if (trim($strs['5']) != '类型') {                    $msg = "表头:" . $strs['5'] . "，与要求表头不匹配，请修改为".trim($strs['5']);                    $status = -1;                    break;                }                if (trim($strs['6']) != '应缴金额') {                    $msg = "表头:" . $strs['6'] . "，与要求表头不匹配，请修改为".trim($strs['6']);                    $status = -1;                    break;                }                if (trim($strs['7']) != '推荐就业') {                    $msg = "表头:" . $strs['7'] . "，与要求表头不匹配，请修改为".trim($strs['7']);                    $status = -1;                    break;                }                if (trim($strs['8']) != '登录账号') {                    $msg = "表头:" . $strs['8'] . "，与要求表头不匹配，请修改为".trim($strs['8']);                    $status = -1;                    break;                }                if (trim($strs['9']) != '学历') {                    $msg = "表头:" . $strs['9'] . "，与要求表头不匹配，请修改为".trim($strs['9']);                    $status = -1;                    break;                }                if (trim($strs['10']) != '账号') {                    $msg = "表头:" . $strs['10'] . "，与要求表头不匹配，请修改为".trim($strs['10']);                    $status = -1;                    break;                }                if (trim($strs['11']) != '证书到期时间') {                    $msg = "表头:" . $strs['11'] . "，与要求表头不匹配，请修改为".trim($strs['11']);                    $status = -1;                    break;                }                if (trim($strs['12']) != '密码') {                    $msg = "表头:" . $strs['12'] . "，与要求表头不匹配，请修改为".trim($strs['12']);                    $status = -1;                    break;                }            } elseif ($row > 1001) {                $msg = '导入失败！单次最大导入量1000条';                $status = -1;                break;            } else {                $data[$row]['name'] = trim($strs['0']);                $data[$row]['mobile'] = trim($strs['1']);                $data[$row]['id_card'] = trim($strs['2']);                $data[$row]['company'] = trim($strs['3']);                $data[$row]['profession_id'] = Profession::where('name',trim($strs['4']))->value('id');                $data[$row]['type'] = trim($strs['5']);                $data[$row]['total_price'] = trim($strs['6']);                $data[$row]['recommend_job'] = trim($strs['7']) == "是" ? 1 : 0;                $data[$row]['auid'] = trim($strs['8']);                // 根据profession_id与type获取最终的工种ID                $pro_where = [                    'pid' => $data[$row]['profession_id'],                    'name'=> $data[$row]['type']                ];                $pro = Profession::get($pro_where);                $data[$row]['profession_top_id'] = $data[$row]['profession_id'];                $data[$row]['profession_id'] = $pro['id'];                unset($data[$row]['type']);//                if (empty($data[$row]['mobile'])){//                    unset($data[$row]);//                    continue;//                }                if (!empty($data[$row]['auid'])){                    $auid = (new AdminUser())->where('admin_name',$data[$row]['auid'])->find();                    $data[$row]['group_id'] = $auid['group_id'];                    $data[$row]['auid'] = $auid['id'];                    $company_auid = Company::where('id',$company_id)->value('auid');                    if($auid['id'] != $company_auid){                        unset($data[$row]);                        continue;                    }                }//                if (!is_Mobile($data[$row]['mobile'])) {//                    $msg = '第' . $row . "行数据，手机号码:" . $data[$row]['mobile'] . "，不正确";//                    $status = -1;//                    break;//                }//                $pay_student = PayStudent::get(['mobile' => $data[$row]['mobile']]);//                if (!empty($pay_student)){//                    return ['status' => -1, 'msg' => '此电话号已存在:'.$data[$row]['mobile']];//                }                if (!empty($ausess)){                    $data[$row]['campus_id'] = $ausess;                }else{                    $campus = \app\backend\model\Campus::all();                    $data[$row]['campus_id'] = array_column($campus,'id')[0];                }                $data[$row]['create_time'] = time();                $data[$row]['education'] = trim($strs['9']);                $data[$row]['account'] = trim($strs['10']);                $data[$row]['expire'] = trim($strs['11']);                $data[$row]['password'] = trim($strs['12']);            }        }        if ($status == 1) {            return ['status' => 1, 'msg' => '数据检查成功', 'data' => $data];        } else {            return ['status' => -1, 'msg' => $msg];        }    }} 